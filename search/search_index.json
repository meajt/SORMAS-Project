{"config":{"lang":["en"],"separator":"[\\s]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#sormas","title":"SORMAS","text":"<p>SORMAS (Surveillance Outbreak Response Management and Analysis System) is an open source eHealth system - consisting of separate web and mobile apps - that is geared towards optimizing the processes used in monitoring the spread of infectious diseases and responding to outbreak situations.</p>"},{"location":"#faq-frequently-asked-questions","title":"FAQ (Frequently Asked Questions)","text":""},{"location":"#how-does-it-work","title":"How Does it Work?","text":"<p>You can give SORMAS a try on our demo server at https://demoversion.sormas-oegd.de!</p>"},{"location":"#how-can-i-get-involved","title":"How Can I Get Involved?","text":"<p>Read through our Contributing Readme and contact us at sormas@helmholtz-hzi.de or join our developer chat on Gitter to learn how you can help to drive the development of SORMAS forward and to get development support from our core developers. SORMAS is a community-driven project, and we'd love to have you on board! If you want to contribute to the code, please strictly adhere to the Development Environment guide to ensure that everything is set up correctly. Please also make sure that you've read the Development Contributing Guidelines before you start to develop, and either follow or regularly check our Twitter account @SORMASDev to stay up to date with our schedule, new releases, guideline changes and other announcements.</p>"},{"location":"#how-can-i-report-a-bug-or-request-a-feature","title":"How Can I Report a Bug or Request a Feature?","text":"<p>If you want to report a security issue, please read and follow our Security Policies. For bugs without security implications, change and feature requests, please create a new issue and read the Submitting an Issue guide for more detailed instructions. We appreciate your help!</p>"},{"location":"#which-browsers-and-android-versions-are-supported","title":"Which Browsers and Android Versions are Supported?","text":"<p>SORMAS officially supports and is tested on Chromium-based browsers (like Google Chrome) and Mozilla Firefox, and all Android versions starting from Android 7.0 (Nougat). In principle, SORMAS should be usable with all web browsers that are supported by Vaadin 8 (Chrome, Firefox, Safari, Edge, Internet Explorer 11; see https://vaadin.com/faq).</p> <p>Making use of the SORMAS web application through a mobile device web browser is possible and acceptable also in countries that are subject to the General Data Protection Regulation (GDPR) as enforced by the European Union. However, in such countries that are subject to the GDPR, the Android application (.apk file) for SORMAS should not be used on mobile devices until further notice.</p>"},{"location":"#is-there-a-rest-api-documentation","title":"Is there a ReST API documentation?","text":"<p>Yes! Please download the latest release and copy the content of /deploy/openapi/sormas-rest.yaml to an editor that generates a visual API documentation(e.g. https://editor.swagger.io/). A runtime Swagger documentation of the External Visits Resource (used by external symptom journals such as CLIMEDO or PIA) is available at <code>&lt;&lt;host&gt;&gt;/sormas-rest/openapi.json</code> or <code>&lt;&lt;host&gt;&gt;/sormas-rest/openapi.yaml</code></p>"},{"location":"#who-is-responsible-for-data-protection-and-data-security","title":"Who is responsible for Data Protection and Data Security?","text":"<p>We herewith explicitly would like to draw your attention to the fact, that the respective public health agency running SORMAS is in charge of data security and data protection and has to ensure compliance with national data protection and data security regulations in their respective jurisdiction. It has to ensure that state-of-the art requirements for data protection and data security are fulfilled. All those prerequisites and examinations have to be done in the context of the country and its respective legal framework. For these reasons, HZI cannot take the responsibility from the respective public health agency running the SORMAS systems and is not liable for any violation of data protection of the agency as the data generated by SORMAS belong to that very agency.</p> <p></p>"},{"location":"#guidelines-and-resources","title":"Guidelines and Resources","text":"<p>If you want to learn more about the development and contribution process, setting up or customizing your own system, or technical details, please consider the following guides and resources available in this repository. You can also view this readme and all guides outside the Wiki with a full table of content and search functionality here: https://hzi-braunschweig.github.io/SORMAS-Project/</p> <ul> <li>GitHub Wiki - Our wiki contains additional guides for server customization and development instructions. Please have a look at it if you need information on anything that this readme does not contain.</li> <li>Contributing Guidelines - These are mandatory literature if you want to contribute to this repository in any way (e.g. by submitting issues, developing code, or translating SORMAS into new languages).</li> <li>Development Environment Setup Instructions - If you want to get involved with development, this guide tells you how to correctly set up your system in order to contribute to the code in adherence with codestyle guidelines, development practices, etc.</li> <li>Troubleshooting - A collection of solutions to common (mostly development) problems. Please consult this readme when encountering issues before issuing a support request.</li> <li>Server Customization - If you are maintaining a SORMAS server or are a developer, this guide explains core concepts such as turning features on or off, importing infrastructure data or adjusting the configuration file.</li> <li>Internationalization - SORMAS can be translated in any language by using the open source tool Crowdin; this resource explains how this process is working.</li> <li>Disease Definition Instructions - We already support a large number of diseases, but not all of them are fully configured for case-based surveillance, and some might not be part of SORMAS at all yet; if you need SORMAS to support a specific disease, please use these instructions to give us all the information we need in order to extend the software with your requested disease.</li> <li>Security Policies - These contain important information about how to report security problems and the processes we are using to take care of them.</li> <li>3rd Party License Acknowledgement - This resource contains the names and license copies of external resources that SORMAS is using.</li> </ul> <p>If you want to set up a SORMAS instance for production, testing or development purposes, please refer to the following guides: * Installing a SORMAS Server * Updating a SORMAS Server * Setup Development environment * Creating a Demo Android App</p>"},{"location":"#project-structure","title":"Project Structure","text":"<p>The project consists of the following modules:</p> <ul> <li>sormas-api: General business logic and definitions for data exchange between app and server</li> <li>sormas-app: The Android app</li> <li>sormas-backend: Server entity services, facades, etc.</li> <li>sormas-base: Base project that also contains build scripts</li> <li>sormas-base/dependencies: Dependencies to be deployed with the payara server</li> <li>sormas-cargoserver: Setup for a local dev server using maven-cargo</li> <li>sormas-e2e-performance-tests: Automated performance tests addressing the ReST interface (sormas-rest)</li> <li>sormas-e2e-tests: Automated frontend tests addressing sormas-ui and API tests against sormas-rest. The API steps are partly used to prepare data for UI tests.</li> <li>sormas-ear: The ear needed to build the application</li> <li>sormas-keycloak-service-provider: Custom Keycloak SPI for SORMAS</li> <li>sormas-rest: The REST interface; see <code>sormas-rest/README.md</code></li> <li>sormas-ui: The web application</li> <li>sormas-widgetset: The GWT widgetset generated by Vaadin</li> <li>sormas-e2e-tests: Automated tests addressing the sormas-ui, and the ReST interface</li> </ul>"},{"location":"3RD_PARTY_ACK/","title":"3rd Party License Acknowledgement","text":"<p>Country flags in <code>sormas-ui/src/main/webapp/VAADIN/themes/sormas/img/flag-icons/</code> are licensed under MIT:</p> <pre><code>Copyright (c) 2017 Go Squared Ltd. http://www.gosquared.com/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and \nassociated documentation files (the \"Software\"), to deal in the Software without restriction, including without \nlimitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, \nand to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO \nTHE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"ADDING_LICENSE/","title":"Adding License Headers","text":""},{"location":"ADDING_LICENSE/#license-header","title":"License Header","text":"<p>Use the following header for all newly created source files:</p> <pre><code>SORMAS\u00ae - Surveillance Outbreak Response Management &amp; Analysis System\nCopyright \u00a9 2016-2021 Helmholtz-Zentrum f\u00fcr Infektionsforschung GmbH (HZI)\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre>"},{"location":"ADDING_LICENSE/#eclipse","title":"Eclipse","text":"<ul> <li>Use eclipse's Releng tool to automatically add license headers to all relevant source files (see here for a usage guide)</li> <li>After installing the tool from the marketplace, open Window &gt; Preferences &gt; Copyright Tool and paste the license header from above into the template text area</li> <li>Make sure to select \"Replace all existing copyright comments with this copyright template\" and especially \"Skip over XML files\" (to make sure that headers don't get added to e.g. build files)</li> <li>Whenever you create a new source file: Right click on the file and select \"Fix Copyrights\"</li> </ul>"},{"location":"ADDING_LICENSE/#android-studiointellij","title":"Android Studio/IntelliJ","text":"<ul> <li>Open File &gt; Settings &gt; Editor &gt; Copyright &gt; Copyright Profiles</li> <li>Create a new profile and paste the license header from above into the Copyright text area</li> <li>Head back to the general Copyright settings and select the new copyright profile as the \"Default project copyright\"</li> <li>(Optional: If the year has changed, right click on all projects containing manual code and select \"Update Copyright...\", select \"Custom Scope\" and in the dropdown, select \"Project Source Files\"; Click \"Ok\" and wait until the copyright has been added to/changed for all files)</li> <li>Android Studio automatically adds the copyright to newly created files afterwards</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing Guidelines","text":"<p>If you want to contribute to SORMAS by any means - for example by submitting a bug report, requesting a new feature, translating the application into a new language, or actively contributing to the source code -, please make sure to read through and follow these guidelines. This allows us to consider and process your contribution as quickly and smoothly as possible. If there is anything unclear to you or you think that this guide is lacking coverage of a specific topic, please create a support issue or get in touch with us via Gitter.</p>"},{"location":"CONTRIBUTING/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Submitting an Issue</li> <li>Bug Report</li> <li>Finding</li> <li>Change Request</li> <li>Feature Request</li> <li>Support Request</li> <li>Epic</li> <li>Contributing to the Project</li> <li>Contributing to the Code</li> <li>Development Contributing Guidelines</li> <li>Picking Issues for Development</li> <li>Submitting Pull Requests</li> <li>Development Workflow</li> <li>Versioning</li> <li>Branches</li> </ul>"},{"location":"CONTRIBUTING/#submitting-an-issue","title":"Submitting an Issue","text":"<p>Before creating a new issue, please search the repository for similar issues first to avoid duplicates! You can do this by using the search field in the menu bar. If you find an issue that already covers your request or seems very similar, please comment on that issue.</p> <p>We are currently distinguishing the following issue types: <code>bug</code>, <code>change</code>, <code>feature</code>, <code>task</code>, <code>epic</code> and <code>support</code>. Please make sure to always use one of the templates that are automatically presented to you when creating a new issue because it ensures that your issue is structured and ideally contains all the information that we need. Please add information to every mandatory section of the issue templates, and try to fill in the optional sections if possible. Do not remove any section because they might be filled later by the development team. Please note that we might have to close issues that are not created this way. While moving forward in the development process, developers might extend or alter the description to better fit what should be changed by that issue.</p> <p>If you want to report a security issue, please follow our guidelines for Responsible Disclosure.</p>"},{"location":"CONTRIBUTING/#bug-report","title":"Bug Report","text":"<p>Bug reports cover everything that leads to the application behaving in an unintended way, including crashes, unexpected error messages, data loss, etc.</p> <ul> <li>Bug Description: A description of what exactly happened, where it happened and under which circumstances. Provide as many details as possible, even if they might seem irrelevant to you. The following subheadings help to structure the needed information.</li> <li>Steps to Reproduce: If possible, provide a step-by-step instruction on the order of actions you performed before the problem occurred. This helps us to reproduce it on our system. Generally optional, but likely necessary for more complex bugs.</li> <li>Screenshots: If possible, make at least one screenshot of the actual behavior and include it in your report (without exposing protected data). You can do this by simply dragging-and-dropping the image file into the template you're filling out. Optional, but very helpful for us.</li> <li>System Details: Tell us which device you were using, on which SORMAS version the problem occurred and, depending on whether you were using the mobile app or the web app, your Android version or web browser.</li> <li>Expected Behavior: Quickly describe what you believe should have happened instead. Optional when the error is identified by a crash or an error message, but likely necessary if the problem is the result of a misbehavior of the application.</li> <li>Additional Information: If there is anything else you want to add to your request, you can put it here. Optional.</li> </ul> <p>Before creating a bug report, please check the following rules:</p> <ol> <li>If something seems to be working correctly but does not necessarily match your expectations of how it should be working, please consider opening a change request instead. This applies also for slow performing features.</li> <li>If you have more than one possible bug - especially when you are tempted to create a list of independent findings in the Bug Description - then please document each bug as separate issue.</li> <li>Bugs are only valid to create if you can point to a released version where the problem is occuring, not on the version currently under development.</li> </ol> <p>The development team defines a severity for bugs to distinguish the consequences for affected users:</p> <ul> <li>critical: The system unusable as a whole or on critical functionality, no workaround is available.</li> <li>major: A functional requirement is incorrect or incomplete, there might be a workaround.</li> <li>minor: Text issues or grammatical mistakes, layouting or cosmetic problems. It does not affect the functionality, no workaround needed.</li> </ul>"},{"location":"CONTRIBUTING/#why-are-bugs-only-valid-on-released-versions","title":"Why are bugs only valid on released versions?","text":"<ol> <li>If there is a problem newly introduced on the <code>development</code> branch, it means that an issue recently worked on is not yet finished (so to be reopened and continued to work on). It's relevant for reviewing (now, soon or far later) to keep changes logically together as good as possible.</li> <li>For the Release Notes it is only relevant to mention changes from one version to the next, so listing fixed bugs that never existed from the end users point of view is pointless, confusing and noisy.</li> </ol>"},{"location":"CONTRIBUTING/#finding","title":"Finding","text":"<p>Findings are used to document unexpected behaviour, mostly encountered within the development.</p> <ul> <li>Problem Description: A description of what exactly happened, where it happened and under which circumstances. Provide as many details as possible, even if they might seem irrelevant to you. The following subheadings help to structure the needed information.</li> <li>Steps to Reproduce: If possible, provide a step-by-step instruction on the order of actions you performed before the problem occurred. This helps us to reproduce it on our system. Generally optional, but likely necessary for more complex problem.</li> <li>Screenshots: If possible, make at least one screenshot of the actual behavior and include it in your report (without exposing protected data). You can do this by simply dragging-and-dropping the image file into the template you're filling out. Optional, but very helpful for us.</li> <li>System Details: Tell us which device you were using, on which SORMAS version the problem occurred and, depending on whether you were using the mobile app or the web app, your Android version or web browser.</li> <li>Expected Behavior: Quickly describe what you believe should have happened instead. Optional when the error is identified by a crash or an error message, but likely necessary if the problem is the result of a misbehavior of the application.</li> <li>Additional Information: If there is anything else you want to add to your request, you can put it here. Optional.</li> </ul> <p>The development team will investigate the finding and add more details when needed. The goal is to either 1. convert it to a bug if it is considered to be a bug on a released version. 2. convert it to a change or other type if there is something to improve. 3. dismiss it as <code>duplicate</code> if the cause on the current development is found and reopened or fixed. 4. dismiss it as <code>discarded</code> if the finding is not an issue.</p> <p>A severity as for bugs can also be used for findings.</p>"},{"location":"CONTRIBUTING/#change-request","title":"Change Request","text":"<p>Change requests cover features that are already part of SORMAS. This primarily includes aspects (or whole features) for which you would like to request an altered behavior, but also small extensions (e.g. additional values being added to a dropdown field).</p> <ul> <li>Problem Description: Tell us why you want us to change or extend an existing feature. Is there something working differently than you expect it? What can be improved about the way it is currently designed?</li> <li>Proposed Change: Describe in as much detail as possible how you would like us to change the feature and what the expected outcome of your request should look like. If possible, provide alternative solutions in case your proposed change can not be implemented in the way you outlined it for any reason.</li> <li>Acceptance Criteria: Describes what conditions should apply to the requested change. These can be functional or non-functional requirements, that are usually specified by the developers.</li> <li>Implementation Details: While refining an issue, a developer usually gives hints what to consider or change in the source code.</li> <li>Additional Information: If there is anything else you want to add to your request, you can put it here. Optional.</li> </ul>"},{"location":"CONTRIBUTING/#feature-request","title":"Feature Request","text":"<p>These types of issue cover everything that involves adding new features to SORMAS. This includes both very large additions like completely new app sections, but also smaller ones like adding a new field to an existing form.</p> <ul> <li>Feature Description: Please describe why your proposed feature is required, why SORMAS in its current state is not able to do what you want it to do. How would you benefit from this feature being implemented?</li> <li>Proposed Change: Describe in as much detail as possible how your proposed feature should look like, what it should do and how it should be linked to existing features or processes. If possible, provide alternative solutions in case your proposed feature can not be implemented in the way you outlined it for any reason.</li> <li>Acceptance Criteria: Describes what conditions should apply to the requested change. These can be functional or non-functional requirements, that are usually specified by the developers.</li> <li>Implementation Details: While refining an issue, a developer usually gives hints what to consider or change in the source code.</li> <li>Additional Information: If there is anything else you want to add to your request, you can put it here. Optional.</li> </ul>"},{"location":"CONTRIBUTING/#task","title":"Task","text":"<p>A task that needs to be done but does not directly change anything about the product. This could for example be the preparation of an upcoming feature/change, optimization of processes on GitHub, working on automated tests, or update of one of the guides or Wiki articles in this repository.</p> <ul> <li>Problem Description: Please describe the requirement or problem that is supposed to be solved.</li> <li>Proposed Solution: Describe in as much detail how the proposed solution should look like and what should be done in order to achieve it.</li> <li>Possible Alternatives: If possible, provide alternative solutions in case your proposed change can not be realized for any reason. This is generally optional but might be requested at a later point in time.</li> <li>Additional Information: If there is anything else you want to add to the task, you can put it here. Optional.</li> </ul>"},{"location":"CONTRIBUTING/#support-request","title":"Support Request","text":"<p>If you have problems setting up a SORMAS server or your development environment, don't know how a specific functionality in SORMAS is supposed to work, or have any other request that is not directly associated with a bug report, change or feature request, a support request is likely the correct type of issue for your concern. Alternatively, you can join our Gitter channel and ask your question over there which might potentially give you a quicker and more comfortable way to talk about your request. If your request is about a specific problem, please make sure to provide as much information as possible.</p>"},{"location":"CONTRIBUTING/#epic","title":"Epic","text":"<p>The development team uses an epic as umbrella for large change or feature streams that are linked together. Within the epic the included issues are linked in the Tasks section.</p>"},{"location":"CONTRIBUTING/#contributing-to-the-project","title":"Contributing to the Project","text":"<p>There are a lot of ways in which you can contribute to this project as a non-developer. If there is something you would like to do that you don't find instructions about here - or if you want to learn how you can get involved - please contact us at sormas@helmholtz-hzi.de and let us know how we can assist you!</p> <p>Some possibilities to contribute to SORMAS are:</p> <ul> <li>Helping with translation</li> <li>Defining new diseases</li> </ul>"},{"location":"CONTRIBUTING/#contributing-to-the-code","title":"Contributing to the Code","text":"<p>If you're interested in participating in the development of SORMAS, please follow the Development Environment Setup Instructions before you start developing. If you have problems setting up your development environment or need assistance in choosing the first issue to work on, please get in touch with us by joining our Gitter channel or contacting us at sormas@helmholtz-hzi.de. Additionally, our Wiki contains some specific development guides that cover common issues like adding new fields to an entity that we suggest to check out before you start implementing something related to those topics.</p> <ul> <li>Technical User Guides</li> <li>Development Guides</li> </ul>"},{"location":"CONTRIBUTING/#development-contributing-guidelines","title":"Development Contributing Guidelines","text":"<p>In addition to the guidelines covered in the Development Environment Setup Instructions, please ensure to adhere to the following principles and procedures while developing code for SORMAS.</p>"},{"location":"CONTRIBUTING/#rules-for-source-code","title":"Rules for source code","text":"<ol> <li>Remember to always apply code formatting and import reordering for all classes you work on; we recommend to use the Save Actions plugin as described in the setup instructions instead of manually executing these steps.</li> <li>Some code formatting rules can't be enforced by the code formatter. Please make sure to write your code in accordance to the following rules:<ul> <li>When defining a method, enter a blank line before starting to write its body (except for methods with only one line of code, e.g. most getters and setters).</li> <li>Use a blank line to separate logical blocks of code within a method.</li> <li>Apart from those, don't use blank lines where they are not necessarily needed to keep the code compact and readable.</li> <li>Don't use blank lines after the last statement of a block, but a closing <code>}</code> with proper indentation in the next line instead.</li> <li>Don't use blank lines between two closing <code>}</code>.</li> </ul> </li> <li>You can use <code>//@formatter:off</code> and <code>//@formatter:on</code> to encapsulate code blocks that you don't want automatic code formatting to be applied to, e.g. because it would mess up readability. Please only use this if really needed and try to use proper indentation nonetheless.</li> <li>Separate code and comments, i.e. write the comment in a separate line before the statement that you want to explain.</li> <li>When you create new classes, please add license headers to them according to the Adding License Headers guide</li> </ol>"},{"location":"CONTRIBUTING/#rules-for-commits","title":"Rules for commits","text":"<ol> <li>Commit messages of every commit have to be related to a specific issue on GitHub and reference its issue number as well as include a short description on what has been done in the commit. We will reject pull requests that violate this principle and ask you to re-submit it with proper commit messages. An acceptable commit message could look like this: </li> <li>A common practice for Git commits is to keep the first line with 50 characters as meaninful short description, and to deliver additional details following in line 3 onwards. Most git viewers abbreviate the first line after 50 characters. </li> <li>Keep changes in bugfixes clean and compact to be able to easily review them and leave the possibility to cherry-pick the changes to another branch to fix a previous version. Don't clean dirty code along the way if not really needed to fix the problem.</li> <li>If an issue requires a lot of code changes, consider breaking down these changes in logical steps. They are then easier to review, have more meaningful commit messages and deliver partly the intended value.</li> <li>Don't mix refactoring with functional changes (new functionality, changes on features, bugfixes) within the same commit, since it makes reviewing the changes much harder. Usually the refactoring of existing code has to happen beforehand in at least one separate commits. This means refactoring (no functional change): Cleaner code, renaming, restructuring.</li> <li>If it helps, it is okay to have several branches and pull requests for the same ticket (usually one after another, sometimes to work in parallel or to prepare changes in advance).</li> <li>If you feel an issue consists out of several parts, feel free to document this in the Implementation Details as task list and check what you consider as finished. Do not break down an issue into sub-issues, unless this has been discussed with the development team.</li> <li>If there is a finding concerning an issue which has been already closed, it will be reopened if that version is not yet released. You (or someone else) will have to quickly fix the finding before the version is released. If the version has been released already, the issue will stay closed and a new issue has to be filed.</li> </ol>"},{"location":"CONTRIBUTING/#1234-added-model-to-define-classification","title":"1234 Added model to define classification","text":""},{"location":"CONTRIBUTING/#1234-added-model-to-define-classification_1","title":"1234 Added model to define classification","text":"<ul> <li>Apply automatic case classification whenever a field value changes</li> <li>Show classification in lists</li> </ul>"},{"location":"CONTRIBUTING/#picking-issues-for-development","title":"Picking Issues for Development","text":"<p>When picking tasks for development, you can either search the repository for existing issues that you would like to work on, or you can submit your own issues if you don't find any that cover your topic of interest (see the \"Submitting an Issue\" section of this guide). While it is not mandatory, we heavily suggest to mark issues that you want to work on with the <code>approval requested</code> label and wait for one of the core developers to respond to the issue in one of the following ways. If you didn't create the issue yourself but picked an existing one, please also add a comment to indicate that you would like to work on it.</p> <ul> <li>The developer might request clarification concerning the specifications of the issue; please try to to answer their questions or extend the issue description and wait for their feedback.</li> <li>The developer might suggest changes to the functional or technical specifications to ensure that it fits the overall vision of the application; please confirm these suggestions or discuss them with the developer if you don't agree with them.</li> <li>The developer might approve the issue by adding an approval comment and removing the <code>approval requested</code> label. This means that we believe that the specifications are complete and the purpose of the issue serves the overall vision of SORMAS. At this point you can start development on the issue.</li> <li>The developer might ask you to pick another issue for development. This will usually only happen if the issue you have requested approval for is already planned to be developed by the core development team for the current or next milestone.</li> <li>The developer might reject the issue altogether. This will usually only happen if it doesn't fit the overall vision of the application at all or is a duplicate, and most of the time we will discuss this with you before closing the issue.</li> </ul> <p>The advantage of adhering to this process is that you can be sure that there won't be any major change requests in terms of functional or technical specifications once you've submitted a pull request containing your work, and that discussions concerning these topics can be led and finished before starting development. If you have labeled an issue with <code>approval requested</code> but don't receive any feedback on it for a few days, please add a comment that directly tags @MateStrysewske, @MartinWahnschaffe or @markusmann-vg.</p>"},{"location":"CONTRIBUTING/#submitting-pull-requests","title":"Submitting Pull Requests","text":"<p>Contributing to the SORMAS code requires you to submit pull requests that will be reviewed by one of our core developers. Once a pull request has been submitted to our repository, a developer will either assign themselves as its reviewer or we will get back to you in case we won't be able to review it in time. This may e.g. happen if your pull request involves a lot of technical changes that we would like to merge together with other issues of the same nature or that could potentially break a lot of logic. Usually though, the general process looks like this:</p> <ol> <li>A developer assigns themselves as the reviewer of your pull request, core developers assign each other. Please wait until the review is done; if you think that the review is taking too long, feel free to add a comment to the pull request as a reminder to the developer.</li> <li>The developer might request changes to the code. If that's the case, please implement the requested changes or answer to their change request if you have questions or don't agree with a specific part of the request.</li> <li>Once you've implemented all requested changes, please request another review by the assigned developer by clicking on the \"Re-request review\" icon next to their name.</li> <li>As soon as the developer is happy with the submitted code (which might require multiple iterations of step 2 and 3, especially for larger pull requests), they will merge it into the development branch and close the pull request.</li> </ol> <p>Please adhere to the following principles when submitting pull requests:</p> <ol> <li>Only submit pull requests that are directly associated with ideally one specific issue in our GitHub repository. If there is no issue for the development work that you would like to do, create one before you start working on it.</li> <li>Link your pull request to the issue(s) that they are associated with. This can be done either by using the \"Linked issues\" section at the right side when viewing a pull request, or by adding the keyword \"Closes\" or \"Fixes\" followed by the issue number to the pull request description (e.g. \"Fixes #1234\").</li> <li>Make sure that your pull request has a meaningful title. By default, GitHub will use your commit message as the title which might not be appropriate. In general, using the same name as the linked issue is a good rule of thumb.</li> <li>Try to not use force-push when updating an existing pull request (e.g. after changes have been requested or because you need to resolve merge conflicts).</li> <li>Ideally, your pull request should pass the checks done by the automatic CI pipeline before it gets reviewed. If that's not the case, please make sure that your branch is up-to-date with the current development branch. If the checks also fail for the development branch, you're not required to do anything. In any other case, please fix the issues (most likely failed unit tests) before requesting another review.</li> </ol>"},{"location":"CONTRIBUTING/#development-workflow","title":"Development Workflow","text":"<p>For SORMAS we use the Gitflow development workflow.</p> <p></p>"},{"location":"CONTRIBUTING/#versioning","title":"Versioning","text":"<p>For version numbers we use semantic versioning. Meaning of a given version number <code>X.Y.Z</code>:</p> <ul> <li>X: Major version: Major changes, severe changes in API or technical architecture.</li> <li>Y: Minor version: Usually a new release of a development iteration of a few weeks, containing new features and changes.</li> <li>Z: Micro version: Fixing problems in the last minor version to make it properly or better to use. Usually contains only bugfixes or small changes.</li> </ul> <p>Versions are defined as Git tags with release notes attached to the tag.</p> <p>An unstable version currently under development is denoted as <code>X.Y.Z-SNAPSHOT</code>.</p>"},{"location":"CONTRIBUTING/#branches","title":"Branches","text":""},{"location":"CONTRIBUTING/#permanent-branches","title":"Permanent branches","text":"<ul> <li>development: This is where the changes are commited/merged to by the developers.</li> <li>master: In regular intervals, the changes from <code>development</code> are merged to master with a identifiable version (tag). On top of this branch there is always the latest released version.</li> <li>master-: In case an older version than the head version on <code>master</code> needs to be fixed (a new micro release), a dedicated <code>master-&lt;version&gt;</code> branch is split from <code>master</code> to manage the following micro releases (Example: <code>master-&lt;version&gt;</code> = <code>master-1.75.x</code>). Changes made on this branch are usually cherry-picked from a newer version (on <code>master</code> or <code>development</code>). <li>l10n_development: Incoming changes on translation files from Crowdin, that are regularly merged into <code>development</code>.</li>"},{"location":"CONTRIBUTING/#supporting-branches","title":"Supporting branches","text":"<ul> <li>release-: To manage changes when merging from <code>development</code> to <code>master</code>. Once the new version is merged to <code>master</code>, the <code>release-&lt;version&gt;</code> branch is automatically removed. <li>hotfix-: To manage changes that are needed on an already released version (on any <code>master</code> branch) that need to be fixed with a new micro release. <p>Some branches contain the concerned version in its name, examples: <code>release-1.75.0</code>, <code>hotfix-1.75.1</code>. To manage new versions, tools are used to automatically merge between branches and tag the new version. Once the new version is merged to <code>master</code>/<code>master-&lt;version</code>, the <code>release-</code>/<code>hotfix-</code> branch are automatically deleted. There is only one <code>release-</code> and only <code>hotfix-</code> branch allowed at same time (enforced by the used Maven plugin).</p>"},{"location":"CONTRIBUTING/#implementation-branches","title":"Implementation branches","text":"<p>These kind of branches are manually created and maintained by developers who work on an issue. Such branches are used to create pull requests on to review the changes before merged into a permanent or supporting branch. * feature-1234_short_description: Any branch that is supposed to contribute to <code>development</code> or a <code>hotfix</code> branch.</p>"},{"location":"DEMO_APP/","title":"Creating a demo app for a SORMAS demo server","text":"<p>Important: This only applies if you have setup your own SORMAS server for demo purposes and and want to give users easy access to it.</p>"},{"location":"DEMO_APP/#step-1-adjust-the-sormas-appproperties","title":"Step 1: Adjust the sormas-app.properties","text":"<ol> <li>Open the the apk file from the SORMAS release with a zip editor (e.g. 7zip).</li> <li>Extract sormas-app.properties and open the the file for editing.</li> <li>Set server.url.default to the URL of your SORMAS server's ReST interface.</li> <li>Set user.name.default and user.password.default to the demo user (needs to be an informant or officer).</li> <li>Overwrite the sormas-app.properties in the apk with your changed version.</li> </ol>"},{"location":"DEMO_APP/#step-2-sign-the-changed-apk-file","title":"Step 2: Sign the changed apk file","text":"<p>Since the apk file has been changed it needs to be signed again.\\ Important: When you change and sign the apk file it is no longer compatible with the original apk file for automatic app update! If you still want to make this work you always have to sign new versions using the same keystore and put the changed apk-file into your SORMAS server for automatic app update.\\</p> <ol> <li>Create a keystore using keytool: <code>keytool -genkey -v -keystore my-demo-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias my-alias</code> <p>Note: keytool is located in the bin/ directory in your JDK. To locate your JDK from Android Studio, select File &gt; Project Structure, and then click SDK Location and you will see the JDK location.</p> </li> <li>Download uber-apk-signer: https://github.com/patrickfav/uber-apk-signer/releases. <p>Note: this is the convenient way to do it. You can also get an Android SDK and follow the instructions given here</p> </li> <li>Sign the apk file: <code>java -jar uber-apk-signer.jar --ks my-demo-key.jks -ksAlias my-alias --allowResign --apks sormas-version-demo.apk</code> <p>See also: https://github.com/patrickfav/uber-apk-signer#command-line-interface</p> </li> </ol>"},{"location":"DEVELOPMENT_ENVIRONMENT/","title":"Development Environment Setup","text":"<p>This step-by-step guide explains how to set up your development environment, using either Eclipse or IntelliJ for the backend and web UI and Android Studio for the mobile app. Please follow it strictly to make sure that development will run as smoothly as possible and your code adheres to our guidelines.</p> <p>Please note that these instructions are optimized for Windows and Linux systems. If you're developing on a Mac and, we would be glad to get your feedback about how this guide can be extended with OS-specific instructions in our developer chat on Gitter.</p>"},{"location":"DEVELOPMENT_ENVIRONMENT/#step-1-check-out-the-sormas-repository","title":"Step 1: Check Out the SORMAS Repository","text":"<ul> <li>Download and install the latest Git version for your operating system</li> <li>Optional: Install a Git client such as TortoiseGit or GitHub Desktop if you don't want to handle version control from the command line or within your IDE</li> <li>Optional: Clone the SORMAS-Project repository with <code>git clone https://github.com/hzi-braunschweig/SORMAS-Project.git</code>; if you want to use Git from within your IDE, you can also clone the repository in Step 4</li> <li>Open Git Bash and execute the following command to ensure that rebase is used when pulling the development branch rather than merge: <code>git config --global branch.development.rebase true</code></li> </ul>"},{"location":"DEVELOPMENT_ENVIRONMENT/#step-2-install-java","title":"Step 2: Install Java","text":"<p>Download and install the Java 11 JDK (not JRE) for your operating system. We suggest using Zulu OpenJDK. If you're running Linux, please refer to the official documentation on how to install Zulu OpenJDK on your system. If you plan to work on the Android App as well, you will also need the Java 8 JDK to use with Android Studio.</p>"},{"location":"DEVELOPMENT_ENVIRONMENT/#step-3-install-maven-ant","title":"Step 3: Install Maven &amp; Ant","text":"<p>Download and install Maven for your operating system, see binaries IMPORTANT: M2_HOME environment variable needs to be set. By default, for newer version, it is set to MAVEN_HOME. But Ant script is looking for M2_HOME, please refer to the official documentation</p> <p>Download and install Ant, it can be done from Ant site or with packages from your Linux distribution.</p>"},{"location":"DEVELOPMENT_ENVIRONMENT/#step-4-install-a-local-sormas-server","title":"Step 4: Install a Local SORMAS Server","text":"<p>Please follow the Server Installation Instructions to set up a local SORMAS instance that you will use to test your code. Alternatively, you can also use Maven Cargo, or a Docker installation (not recommended at this time).</p>"},{"location":"DEVELOPMENT_ENVIRONMENT/#step-5-install-and-configure-your-ide","title":"Step 5: Install and Configure Your IDE","text":""},{"location":"DEVELOPMENT_ENVIRONMENT/#intellij","title":"IntelliJ","text":"<ul> <li>Download and install the latest IntelliJ IDEA Ultimate; (newer than version of 2020-04-15 to enable debugging, see https://youtrack.jetbrains.com/issue/IDEA-216528)</li> <li>Set the project SDK to the installed JDK</li> <li>Optional: Clone the SORMAS-Project repository if you haven't done so already</li> <li>Open the project in IntelliJ. Make sure the project is recognized by IntelliJ as a <code>maven project</code>; if not, right-click the <code>pom.xml</code> file in <code>sormas-base</code> and select <code>Add as maven project</code>.</li> <li>Make sure that under <code>File -&gt; Project Structure -&gt; Modules</code> all modules EXCEPT sormas-app are recognized; if not, add the missing modules with the <code>+</code> button</li> <li>Navigate to <code>File -&gt; Settings -&gt; Plugins</code> and make sure that Glassfish &amp; Ant integrations are enabled</li> <li>Install the Vaadin 6-8 plugin; the commercial Vaadin Designer is not needed</li> <li>Make a copy of <code>sormas-base/build.properties.example</code>, rename it to <code>build.properties</code> and set <code>glassfish.domain.root</code> to the location of the SORMAS domain inside your Payara installation</li> <li>Run <code>mvn install</code> on the <code>sormas-base</code> project (e.g. by opening the Maven view and executing <code>sormas-base -&gt; Lifecycle -&gt; install</code>)</li> <li>Add a Payara server to IntelliJ:</li> <li>Open <code>Run -&gt; Edit Configurations</code>, add a new configuration and choose the Glassfish server template</li> <li>Click on <code>Configure</code> next to <code>Application server</code> and create a new server configuration by selecting your Payara installation directory</li> <li>Check the <code>After launch</code> checkbox and specify the browser that you want SORMAS to open in once the server has been deployed</li> <li>Enter <code>http://localhost:6080/sormas-ui</code> into the <code>URL</code> field</li> <li>Make sure that the correct JRE is specified (your Java 11 JDK)</li> <li>Enter the path to the SORMAS domain and the credentials that you've specified when setting up the server</li> <li>Open the <code>Deployment</code> tab and add the artifacts <code>sormas-ear</code>, <code>sormas-rest</code> and <code>sormas-ui</code> (make sure to respect this order as there are dependencies between artifacts at startup)</li> <li>Open the <code>Logs</code> tab and add a new log file pointing to the <code>logs/server.log</code> file in your SORMAS domain</li> <li>Open the <code>Startup/Connection</code> tab and make sure that <code>Pass environment variables</code> is NOT checked; ignore warnings about the debug configuration not being correct</li> <li>Open the <code>config/domain.xml</code> file in your domain directory and make sure that the <code>java-config</code> node contains the following code: <code>&lt;java-config classpath-suffix=\"\" debug-enabled=\"true\" debug-options=\"-agentlib:jdwp=transport=dt_socket,address=6009,server=n,suspend=y\" ...</code></li> <li>Open the Ant window, click on the <code>+</code> icon and select the <code>sormas-base/build.xml</code> file</li> <li>Execute the <code>install</code> and <code>deploy-serverlibs</code> Ant scripts</li> <li>Set the default working directory for run configurations by navigating to <code>Run -&gt; Edit Configurations -&gt; Templates -&gt; Application</code> and setting <code>Working directory</code> to <code>$MODULE_WORKING_DIR$</code></li> <li>Optional: Setup database access from Intellij: Open View -&gt; Tool View -&gt; Database, click on + icon and select DataSource -&gt; PostgreSQL and configure the database (set user and password and download the missing driver files if needed)</li> </ul>"},{"location":"DEVELOPMENT_ENVIRONMENT/#known-issues","title":"Known issues","text":"<ul> <li>The first time you build the project in IntelliJ, you have to switch the java compiler to \"Eclipse\" to workarround a dependency resolution problem in sormas-api.</li> </ul>"},{"location":"DEVELOPMENT_ENVIRONMENT/#eclipse","title":"Eclipse","text":"<ul> <li>Download and install the latest Eclipse IDE for Enterprise Java and Web Developers</li> <li>Set the default JRE of Eclipse to the installed JDK: Assigning the default JRE for the workbench</li> <li>Optional: Clone the SORMAS-Project repository if you haven't done so already via <code>File -&gt; Import -&gt; Git -&gt; Projects from Git</code> and cancel the process when you're asked to create a new project from the cloned repository</li> <li>Import the projects from the SORMAS-Project repository into your workspace via <code>File -&gt; Import -&gt; Maven -&gt; Existing Maven Projects</code></li> <li>Install the Payara Tools plugin</li> <li>Install the Vaadin Plugin for Eclipse; the commercial UI designer is not needed</li> <li>Add a Payara server to Eclipse and enter the credentials you specified when setting up the local SORMAS server</li> <li>Make a copy of <code>sormas-base/build.properties.example</code>, rename it to <code>build.properties</code> and set <code>glassfish.domain.root</code> to the location of the SORMAS domain inside your Payara installation</li> <li>Drag the <code>sormas-base/build.xml</code> file into the Ant view in Eclipse</li> <li>Either run <code>mvn install</code> on the <code>sormas-base</code> project or execute the <code>install [default]</code> Ant script (this needs a Maven installation on your system with the M2_HOME variable set)</li> <li>Execute the <code>deploy-serverlibs</code> Ant script</li> <li>Highlight all Eclipse projects and choose <code>Maven -&gt; Update Project</code> from the right-click menu; perform the update for all projects</li> <li>Start the Glassfish server and deploy <code>sormas-ear</code>, <code>sormas-rest</code> and <code>sormas-ui</code> by dragging the respective projects onto it, or use the <code>Add and Remove...</code> function by right-clicking on the server (make sure to respect this order as there are depdendencies between artifacts at startup)</li> <li>Open your browser and type in <code>http://localhost:6080/sormas-ui</code> to test whether the server and IDE have been set up correctly</li> </ul>"},{"location":"DEVELOPMENT_ENVIRONMENT/#android-studio","title":"Android Studio","text":"<p>Please note: You only need to install Android Studio if you're developing code for the Android app. This is likely the case when you're adding new fields or entities to the system, or if you specifically want to work on the mobile app.</p> <ul> <li>Download and install the latest Android Studio version</li> <li>Please make sure to run the installer with admin rights if you're using Windows</li> <li>Ensure that the Android SDK installation path does not contain whitespaces; you can also change this later via <code>Tools -&gt; SDK Manager -&gt; Android SDK Location</code></li> <li>Open Android Studio and import the <code>sormas-app</code> module from the SORMAS-Project repository</li> <li>Make a copy of <code>keystore.properties.example</code> and rename it to <code>keystore.properties</code></li> <li>Make sure to use the JDK version 11 (<code>File -&gt; Project Structure -&gt; SDK Location -&gt; JDK Location</code>)</li> <li>Build the Android Studio project by executing the Gradle build (this may be done automatically)</li> <li>Add an emulator and set the SDK version to the <code>minSdkVersion</code> or <code>targetSdkVersion</code> from <code>build.gradle</code>; we suggest to test your code on both, but <code>minSdkVersion</code> should be preferred to ensure compatibility to the minimum supported SDK</li> <li>Click on <code>Run 'app'</code> to install and run the app on your emulator; enter <code>http://10.0.2.2:6080/sormas-rest</code> as the server URL when you start the newly installed app for the first time</li> </ul> <p>Important: Whenever you do or pull changes in the <code>sormas-api</code> project that you want to use in the mobile app or that are referenced there already, you need to execute the <code>install</code> Ant script to notify the <code>sormas-app</code> project of the changes.</p>"},{"location":"DEVELOPMENT_ENVIRONMENT/#step-6-configure-code-formatting-and-import-settings","title":"Step 6: Configure Code Formatting and Import Settings","text":"<p>In order to ensure a consistent code style and prevent so-called edit wars, we have set up custom configuration files for automatic code formatting and import ordering. Please make sure to adhere to the following steps for your IDE(s) before you start developing.</p>"},{"location":"DEVELOPMENT_ENVIRONMENT/#intellij-and-android-studio-settings","title":"IntelliJ and Android Studio Settings","text":"<ul> <li>Install the Eclipse Code Formatter for IntelliJ/Android Studio plugin</li> <li>Open the plugin settings via <code>File -&gt; Settings -&gt; Other Settings -&gt; Eclipse Code Formatter</code> and select <code>Use the Eclipse Code Formatter</code></li> <li>Under <code>Eclipse formatter config</code>, choose <code>Eclipse workspace/project folder or config file</code> and select <code>sormas-base/java-formatter-profile.xml</code></li> <li>Check <code>Optimize Imports</code></li> <li>Under <code>Import order</code>, choose <code>From file</code> and select <code>sormas-base/java-importorder-profile.importorder</code></li> <li>Make sure that <code>Do not format other file types by IntelliJ formatter</code> is selected</li> <li>Go to <code>Editor -&gt; Code Style -&gt; Java -&gt; Imports</code> and set <code>Class count to use import with '*'</code> and <code>Names count to use static import with '*'</code> to 99</li> <li>Navigate to <code>Editor -&gt; General -&gt; Auto Import</code> and disable <code>Optimize imports on the fly</code></li> </ul> <p>Optional, but strongly recommended: - Install the Save Actions plugin that automatically applies code formatting and import reordering whenever you save a file - otherwise you will manually have to do so (by default with Ctrl+Alt+L) - Open the plugin settings via <code>File -&gt; Settings -&gt; Other Settings -&gt; Save Actions</code> and make sure that the first three checkboxes under <code>General</code> and the first two checkboxes under <code>Formatting Actions</code> are selected</p>"},{"location":"DEVELOPMENT_ENVIRONMENT/#eclipse-settings","title":"Eclipse Settings","text":"<ul> <li>Open <code>Window -&gt; Preferences</code></li> <li>Navigate to <code>Java -&gt; Code Style -&gt; Formatter</code>, import <code>sormas-base/java-formatter-profile.xml</code> and apply the changes</li> <li>Navigate to <code>Java -&gt; Code Style -&gt; Organize Imports</code> and import <code>sormas-base/java-importorder-profile.importorder</code></li> <li>On the same screen, set <code>Number of imports needed for .*</code> and <code>Number of static imports needed for .*</code> to 99</li> <li>On the same screen, make sure that <code>Do not create import for types starting with a lowercase letter</code> is checked and apply the changes</li> <li>Navigate to <code>Java -&gt; Editor -&gt; Save Actions</code> and make sure that the following options are selected: <code>Perform the selected actions on save</code>, <code>Format source code</code>, <code>Format all lines</code> and <code>Organize imports</code></li> </ul>"},{"location":"DEVELOPMENT_ENVIRONMENT/#issues-which-can-appear-during-installation-process-of-the-project","title":"Issues which can appear during installation process of the project","text":"<ol> <li> <p>If debug mode does not work: To replace opt\\payara5\\glassfish\\modules\\launcher.jar with sormas-base/setup/launcher.jar</p> </li> <li> <p>For Windows: Please check your java_version. In case if you have the multiple java_versions installed on the system, it will always show to you the first version installed.    I had the java 8 instead of 11.    In order to fix it, go to environment variables, and move the 11 version up. And rerun the script. Seems that the console is reading those variables at the starting point, and the values of it can be updated only after console/script restart.</p> </li> <li> <p>For Windows: Pay attention to the postgres SQL files rights permissions after unziping the downloaded ZIP archive. Files physically were present but next script error has been generated:    psql:setup.sql:7: ERROR:  could not open extension control file \"C:/Program Files/PostgreSQL/10/share/extension/temporal_tables.control\": No such file or directory    -I checked the file rights, and under windows they has AV attribute, however, all others has only A attribute. When I was trying to open them with Notepad++ it was saying that such file does not exist. Do you want to create it? If <code>yes</code> will be pressed - another message saying that the file exists, appeared. Very strange scenario...</p> </li> <li> <p>All the postgres commands (of added users, etc.) which were added at first startup of the application - will raise errors in case if such entity exists. Just ignore those errors at repeated installation of .\\server-setup.sh</p> </li> <li> <p>Check always the port number 6048 which can be occupied by an old instance of payara.    -&gt; For every installation, kill all Java/javaw processes and check the availability of 6048 port number.    -&gt; Delete files with generated domain folders and payara. In order to have a clean installation of each next ./server-setup.sh run.</p> </li> <li> <p>M2_HOME need to be set. By default, for newer version, it is set to MAVEN_HOME. But Ant script is looking for M2_HOME</p> </li> <li> <p>For eclipse formatted plugin, there is an issue for Idea: https://plugins.jetbrains.com/plugin/6546-eclipse-code-formatter - <code>cannot save settings Path to custom eclipse folder is not valid</code> - it works only when settings were saved from down to up. And not vice versa.</p> </li> </ol> <p>If something is still not working:  -&gt; Stop the payara domain, run Ant deploy-serverlibs to update libs  -&gt; clean up (delete all from domains/sormas/autodeploy, domains/sormas/applications, domains/sormas/generated, and domains/sormas/osgi-cache) try to build again by executing <code>mvn clean install -DskipTests</code> on the <code>sormas-base</code> module  -&gt; start the domain and deploy again</p>"},{"location":"DEVELOPMENT_ENVIRONMENT/#avoid-redeployment-problems","title":"Avoid redeployment problems","text":"<p>Problem: Due to currently a not mitigated problem, it is only possible to deploy the <code>sormas-ear.ear</code> (contains <code>sormas-backend</code>) once without problems. If you undeploy it and deploy <code>sormas-ear.ear</code> again, the other artifacts <code>sormas-ui</code>and <code>sormas-rest</code> cannot successfully call the backend.</p> <p>Workaround: Undeploy <code>sormas-ear</code> and all other sormas artifacts, restart the Payara domain, deploy <code>sormas-ear</code> again (the same or changed version).</p> <p>Symptom: This exception occurs when <code>sormas-ui</code> or <code>sormas-rest</code> calls the <code>sormas-backend</code>.</p> <pre><code>Caused by: java.lang.IllegalArgumentException: Can not set java.util.Properties field de.symeda.sormas.backend.common.ConfigFacadeEjb.props to de.symeda.sormas.backend.common.ConfigFacadeEjb\n    at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)\n    at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)\n    at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58)\n    at java.base/jdk.internal.reflect.UnsafeObjectFieldAccessorImpl.set(UnsafeObjectFieldAccessorImpl.java:75)\n    at java.base/java.lang.reflect.Field.set(Field.java:780)\n   at com.sun.enterprise.container.common.impl.util.InjectionManagerImpl._inject(InjectionManagerImpl.java:594)\n</code></pre> <p>Additional info: - You can undeploy and deploy all other modules without restarting the Payara domain, as long as nothing changes on <code>sormas-ear</code> (implicates <code>sormas-api</code> and <code>sormas-backend</code>). - The problem occurs no matter if you deploy directly from your IDE or as packaged ears/wars into the autodeploy directory. - Related ticket: #2511</p>"},{"location":"I18N/","title":"SORMAS Translation FAQ","text":""},{"location":"I18N/#who-is-translating-sormas","title":"Who is translating SORMAS?","text":"<p>The translation of SORMAS relies on people from the community. If you would like to see SORMAS translated to your language, please read the points below and take part in the process.</p>"},{"location":"I18N/#how-is-sormas-translated","title":"How is SORMAS translated?","text":"<p>The official SORMAS translation is done using the Crowdin platform: https://crowdin.com/project/sormas</p> <p>All translations done on the platform are automatically fed into SORMAS and are part of the bi-weekly release schedule. This means that any text you translate will likely be part of the next SORMAS release. Once your server (or the server of your country) is updated you will be able to see the translations in the web app and mobile app.</p>"},{"location":"I18N/#how-to-participate-in-translating-sormas","title":"How to participate in translating SORMAS","text":"<p>You can join the translation project by creating a free account on Crowdin. You can also use your existing GitHub account. Before starting to translate, you need to request write access to the project. A member of the project will either accept your request or get in touch with you as soon as possible.</p> <p>Afterwards open the SORMAS project https://crowdin.com/project/sormas and select the language you would like to translate.</p> <p>You will see all files that contain translatable texts:</p> <p></p> <p>The most important one is captions.properties. It contains the captions for all the data entry fields of SORMAS. The captions are shared by the web app and mobile app.</p> <p>Click on the file to open the Crowdin editor that allows you to go through all translation entries one by one as shown in the picture below:</p> <p></p>"},{"location":"I18N/#how-to-add-a-new-language-to-sormas","title":"How to add a new language to SORMAS","text":"<p>If the language you would like to translate is not available yet, please get in contact with us: https://github.com/hzi-braunschweig/SORMAS-Project</p>"},{"location":"SECURITY/","title":"Security Policies and Procedures","text":"<p>This document outlines security procedures and general policies for the SORMAS project.</p> <ul> <li>Security Policies and Procedures</li> <li>Reporting a Security Bug</li> <li>Disclosure Policy</li> <li>Comments on this Policy</li> </ul> <p>If you want to report a bug which is not security sensible, please submit an issue.</p>"},{"location":"SECURITY/#reporting-a-security-bug","title":"Reporting a Security Bug","text":"<p>Our team and community take all security bugs in SORMAS seriously. Thank you for improving the security of SORMAS. We appreciate your efforts and responsible disclosure and will make every effort to acknowledge your contributions. Unfortunately, SORMAS does not offer a paid bug bounty programme or other forms of compensation.</p> <p>Report security bugs by emailing at security@sormas.org.</p> <p>We will acknowledge your email and follow up with a response within 10 business days, or explain why a reply may take longer. The response will indicate the next steps in handling your report. After the initial reply to your report, the security team will endeavor to keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance.</p> <p>Report security bugs in third-party modules to the person or team maintaining the module.</p>"},{"location":"SECURITY/#disclosure-policy","title":"Disclosure Policy","text":"<p>When the security team receives a security bug report, they will assign it to a primary handler. This person will coordinate the fix and release process, involving the following steps:</p> <ul> <li>Confirm the problem and determine the affected versions.</li> <li>Audit code to find any potential similar problems.</li> <li>Prepare fixes for all releases still under maintenance. These fixes will be   released as fast as possible.</li> </ul>"},{"location":"SECURITY/#comments-on-this-policy","title":"Comments on this Policy","text":"<p>If you have suggestions on how this process could be improved please submit a pull request.</p>"},{"location":"SERVER_CUSTOMIZATION/","title":"Configuring and Customizing a SORMAS Server","text":"<p>SORMAS has been created and is developed as an international system that can potentially be used everywhere in the world. However, every country naturally has its own requirements and processes, and in addition, there is a set of information that needs to be specified before a SORMAS instance can function properly. For this reason, there are a number of ways in which such a SORMAS instance can be configured and customized:</p> <ul> <li>Server Configuration: The basic server configuration is available as a .properties file, needs to be adjusted for every SORMAS instance, and is relevant for both production and development. This should be edited directly after installing the server.</li> <li>Feature Configuration: Most SORMAS features are optional and can be turned on or off directly in the database.</li> <li>Disease Configuration: SORMAS supports a large number of infectious diseases which can be enabled or disabled and further customized directly in the database.</li> <li>Deletion Configuration: SORMAS can be configured to automatically delete entities in the database.</li> <li>Infrastructure Data: Most infrastructure data (except countries and continents) are not shipped with SORMAS because they are country-specific. Importing the infrastructure data of your country (or creating some dummy data) is one of the first things you should do after setting up a SORMAS server.</li> </ul> <p>Beyond that, the Wiki contains even more customization options:</p> <ul> <li>Adding Disease Variants to a SORMAS Server</li> <li>Customizing the Login and About Pages</li> <li>Customizing the Name and Icon of the Android App</li> <li>Creating a SORMAS2SORMAS Certificate</li> </ul>"},{"location":"SERVER_CUSTOMIZATION/#server-configuration","title":"Server Configuration","text":"<p>The general SORMAS configuration is stored in the sormas.properties file that you can find in your payara domain folder. When you set up a new SORMAS server, please make sure to go over all entries in that file and adjust their values if necessary. Each property has an explanation telling you its purpose, and some of them also have a default value that you can use to revert the changes you've made.</p> <p>Most of these properties are commented (indicated by a # in front of their name and value), which means that the default value will automatically be used (e.g. the path to temporary files on the server) or the associated feature will not be used at all (e.g. the custom branding properties or the configuration of an external symptom journal). Some properties however are not commented, but also don't have a default value. It is strongly recommended to enter values for these properties because they are required for some parts of SORMAS to work correctly, or because they are very specific to your individual SORMAS instance. This especially applies to the country.locale and country.name properties, which will cause serious problems while using the application if left empty.</p> <p>Important: The sormas.properties file contains all properties that existed in the SORMAS version that you initially installed on your server. New properties added in more recent SORMAS versions are not automatically added! If you're operating a SORMAS server, we strongly suggest to read the release notes of new versions. If properties have been added to this file, they will be communicated in these notes so that you can add them to your properties file.</p> <p>This Wiki page contains a list and explanation of all currently configurable properties.</p>"},{"location":"SERVER_CUSTOMIZATION/#feature-configuration","title":"Feature Configuration","text":"<p>Some of the features of SORMAS can be enabled or disabled to further customize the system. Right now, this is only possible directly in the <code>featureconfiguration</code> table in the database. This table contains one entry for every configurable feature and is automatically populated during server startup. Setting the <code>enabled</code> to <code>true</code> or <code>false</code> will enable or disable the feature, respectively. Changes are immediately applied to the running system and don't require a server restart.</p> <p>The columns <code>region</code>, <code>district</code>, <code>disease</code> and <code>enddate</code> are currently only applicable for the line listing feature and define the scope in which the line listing is used. Line listing is configurable from the user interface and does not need to be manually edited in the database.</p> <p>Important: If you're using the mobile app, you also need to update the <code>changedate</code> to the current date and time whenever you enable or disable a feature! Otherwise the mobile applications will not be notified about the change.</p> <p>This Wiki page contains a list and explanation of all currently configurable features.</p>"},{"location":"SERVER_CUSTOMIZATION/#disease-configuration","title":"Disease Configuration","text":"<p>SORMAS supports a wide range of diseases, and not all of those might be relevant to every SORMAS instance or might be used in a different context. As with features, configuring diseases is currently only possible directly in the database via the <code>diseaseconfiguration</code> table. All diseases have a default value for each of their properties that is applied when the respective database entry is empty. Changing these entries overrides that default value. Unlike with features, disease configurations are cached and therefore require you to restart the server before they are applied.</p> <p>Important: If you're using the mobile app, you also need to update the <code>changedate</code> to the current date and time whenever you change a disease configuration! Otherwise the mobile applications will not be notified about the change.</p> <p>This Wiki page contains a list and explanation of all currently configurable disease properties.</p>"},{"location":"SERVER_CUSTOMIZATION/#deletion-configuration","title":"Deletion Configuration","text":"<p>SORMAS can be set up to automatically delete entities after a specific time period. There are seven core entities for which automatic deletion can be enabled and configured: Case, Contact, Event, Event Participant, Immunization, Travel Entry, and Campaign. This configuration is currently only possible directly in the database via the <code>deleteconfiguration</code> table, which already contains rows for each of these entities. The table consists of the following columns:</p> <ul> <li><code>entityType</code>: The name of the entity that supports automatic deletion.</li> <li><code>deletionReference</code>: The reference date for the calculation of the date on which deletion takes place (see below).</li> <li><code>deletionPeriod</code>: The number of days after which an entity is deleted, starting with the deletion reference. The minimum is 7.</li> </ul> <p>Both <code>deletionReference</code> and <code>deletionPeriod</code> need to be filled in order for the automatic deletion to take place. Entities for which at least one of these fields is left empty will not be automatically deleted. Deletion is executed via a nightly cron job and might therefore not happen immediately when the deletion date has been reached.</p>"},{"location":"SERVER_CUSTOMIZATION/#deletion-reference","title":"Deletion Reference","text":"<p>The <code>deletionReference</code> field has four possible values which define the date that is used to calculate whether an entity needs to be deleted (i.e., when the date calculated by subtracting the deletion period from the current date is before the deletion reference date, the entity is deleted). A <code>MANUAL_DELETION</code> entry can exist in parallel to one of the other entries, and if both entries are configured, deletion is executed as soon as the threshold of one of these entries is met.</p> <ul> <li><code>CREATION</code>: The creation date of the entity will be used.</li> <li><code>END</code>: The latest change date of the entity itself and any of its depending entities will be used. E.g. for cases, this includes but is not limited to its epi data, symptoms, or hospitalization.</li> <li><code>ORIGIN</code>: This is currently only implemented for travel entries and means that the report date of the entity will be used. If this is specified for any other entity, the deletion job will be stopped and throw an error.</li> <li><code>MANUAL_DELETION</code>: The date on which the entity was manually deleted by a user.</li> </ul>"},{"location":"SERVER_CUSTOMIZATION/#infrastructure-data","title":"Infrastructure Data","text":"<p>When you start a SORMAS server for the first time and the <code>createDefaultEntities</code> property is enabled, some default infrastructure data is generated to ensure that the server is usable and the default users can be created. It is recommended (and, unless you're working on a demo server, necessary) to archive this default data and import the official infrastructure data of the country or part of the country that you intend to use SORMAS in instead.</p> <p>SORMAS by default splits infrastructure data into four mandatory categories. Starting from the highest administrative division, these are Regions, Districts, Communities, and Health Facilities. In addition, Points of Entry represent places like harbors and airports where people are frequently entering the country, while Laboratories are technically health facilities that are specifically used for sample testing purposes. The Area infrastructure type can be enabled in the feature configuration and adds another optional layer of infrastructure above Regions. Finally, it is possible to add Countries, Subcontinents and Continents to your system if you also want to collect data from outside the country SORMAS is used in (e.g. because you want to record travels or events).</p>"},{"location":"SERVER_CUSTOMIZATION/#importing-infrastructure","title":"Importing Infrastructure","text":"<p>To import your data for one of the administrative divisions, log in as the default admin user (which is created even when <code>createDefaultEntities</code> is disabled) and open the Configuration menu. Open any of the tabs for the infrastructure data you want to import and click on the Import button on the top right. You can download an import guide from within the popup window that will be opened, containing detailed instructions about the import process and the steps you need to go through in order to successfully import your data.</p> <p>Make sure that you always start with the highest administrative division when importing (i.e. at least Countries if you want to collect data from other countries as well, Areas if enabled, or Regions otherwise) and work your way down to the lowest, because lower divisions typically contain mandatory references to higher divisions.</p> <p>For Countries, Subcontinents and Continents, SORMAS provides a default import that allows you to automatically add a complete set of data to your system. For Countries, this default data equals to the official list of countries provided by the WHO. For Subcontinents and Continents, the list is based on the data used by the Robert Koch Institut.</p>"},{"location":"SERVER_CUSTOMIZATION/#user-role-configuration","title":"User Role Configuration","text":"<p>A user is the user account for employees who have access to SORMAS. Similarly, there are technical users that allow external systems to access data. Users have one or sometimes more user roles. The roles of a user can be chosen by an admin when creating a new user or editing an existing one. Each user role is defined by a set of user rights, a jurisdiction that represents the area of responsibility and a set of notifications. For example, the jurisdiction of a surveillance officer is the district, which is defined on the user. User roles that have different areas of responsibility are therefore not combinable.</p> <p></p> <p>SORMAS comes with an extensive list of user rights that are used to check which data and functionality can be access by the user in the backend and the user interface. To cover the typical use cases, SORMAS defines a set of default user roles that are automatically created when setting up a SORMAS instance. Most user rights define an action related to an entity type, e.g. the user right CASE_EDIT allows users to edit case data. Notifications define when the user with the given role should get an SMS and/or Email notification.</p> <p>The following automatically generated documents list and describe all user rights, notifications and the default user roles: * https://github.com/hzi-braunschweig/SORMAS-Project/blob/development/sormas-api/src/main/resources/doc/SORMAS_User_Roles.xlsx</p> <p>User roles are fully configurable, allowing admins to create new user roles and edit existing ones, to customize the instance to the given needs and to make sure data protection requirements are fulfilled.</p>"},{"location":"SERVER_CUSTOMIZATION/#related-topics","title":"Related topics","text":"<ul> <li>Epic that introduced configurable user roles: #898</li> <li>Data access based on user rights and user's jurisdiction: https://github.com/hzi-braunschweig/SORMAS-Project/blob/development/sormas-backend/doc/UserDataAccess.md</li> <li>Using keycloak as authentication provider: https://github.com/hzi-braunschweig/SORMAS-Project/blob/development/docs/SERVER_SETUP.md#keycloak-server</li> <li>The available jurisdiction levels (nation, region, district, health facility, etc.) are defined in Java code https://github.com/hzi-braunschweig/SORMAS-Project/blob/development/sormas-api/src/main/java/de/symeda/sormas/api/user/JurisdictionLevel.java</li> </ul>"},{"location":"SERVER_DOCKER_SETUP/","title":"Installing a SORMAS Server for development","text":"<p>Note: This guide explains how to configure a SORMAS server on Linux and Windows systems for development. Please note that there is no database setup because the script supposes the use of the Docker Postgresql image (see SORMAS-Docker).</p>"},{"location":"SERVER_DOCKER_SETUP/#content","title":"Content","text":"<ul> <li>Prerequisites</li> <li>Java 11</li> <li>ant</li> <li>Postgres Database</li> <li>SORMAS Server</li> </ul>"},{"location":"SERVER_DOCKER_SETUP/#related","title":"Related","text":"<ul> <li>Installing a SORMAS Server</li> </ul>"},{"location":"SERVER_DOCKER_SETUP/#prerequisites","title":"Prerequisites","text":""},{"location":"SERVER_DOCKER_SETUP/#java-11","title":"Java 11","text":"<p>See Installing Java</p> <p>SORMAS just recently moved to Java 11. We still need to support Java 8 for a transition period. Therefore, please just use Java 8 language features for now.</p>"},{"location":"SERVER_DOCKER_SETUP/#ant","title":"Ant","text":"<p>Download and install Ant, it can be done from Ant site or with packages from your Linux distribution.</p>"},{"location":"SERVER_DOCKER_SETUP/#postgres-database","title":"Postgres Database","text":"<p>See Installing Postgresql</p> <p>Alternatively you can use the Docker image available in SORMAS-Docker repository.</p>"},{"location":"SERVER_DOCKER_SETUP/#sormas-server","title":"SORMAS Server","text":"<p>Install you own Payara server (see installing SORMAS Server) or run <code>bash ./server-setup-dev-docker.sh</code></p> <p>This script will download Payara (if needed) and install SORMAS in the Payara server.</p> <p>You can edit this script to change paths and ports.</p> <p>Other steps : * IMPORTANT: Adjust the SORMAS configuration for your country in /opt/domains/sormas/sormas.properties * Adjust the logging configuration in <code>${HOME}/opt/domains/sormas/config/logback.xml</code> based on your needs (e.g. configure and activate email appender) * Build and deploy applications (ear and war) with you IDE.</p>"},{"location":"SERVER_DOCKER_SETUP/#keycloak","title":"Keycloak","text":"<p>See Keycloak for how to install Docker locally.</p> <p>If you are doing active development on Keycloak (themes, authentication mechanisms, translations, etc.) it's recommended to install the standalone variant.</p>"},{"location":"SERVER_DOCKER_SETUP/#vaadin-debug-mode","title":"VAADIN Debug Mode","text":"<p>To enable VAADIN Debug Mode, go to <code>sormas-ui/src/main/webapp/WEB-INF/web.xml</code> and set <code>productionMode</code> to <code>false</code>. Make sure not to commit your changes to these files, for example by using .gitignore. To access the debug Window, got to /sormas-ui/?debug. You may need to log in as admin once first."},{"location":"SERVER_DOCKER_SETUP/#other-components","title":"Other components","text":"<p>See Installing a SORMAS Server</p>"},{"location":"SERVER_SETUP/","title":"Installing a SORMAS Server","text":"<p>Note: This guide explains how to set up a SORMAS server on Linux and Windows systems, the latter only being intended for usage on development systems. Please also note that certain parts of the setup script will not be executed on Windows.</p>"},{"location":"SERVER_SETUP/#content","title":"Content","text":"<ul> <li>Installing a SORMAS Server</li> <li>Content</li> <li>Related</li> <li>Prerequisites<ul> <li>Java 11</li> <li>Linux</li> <li>Windows</li> <li>Postgres Database</li> </ul> </li> <li>SORMAS Server<ul> <li>Install on Linux</li> <li>Install on Windows</li> <li>Post-Installation Configuration</li> </ul> </li> <li>Keycloak Server<ul> <li>Keycloak as a Docker container</li> <li>Keycloak as a standalone installation</li> <li>Connect Keycloak to an already running instance of SORMAS</li> <li>Keycloak configuration</li> </ul> </li> <li>Web Server Setup<ul> <li>Apache Web Server</li> <li>Firewall</li> <li>Postfix Mail Server</li> <li>Install postfix and mailutils</li> <li>Configure your system</li> <li>Testing the Server Setup</li> </ul> </li> <li>R Software Environment</li> <li>SORMAS to SORMAS Certificate Setup</li> <li>Troubleshooting<ul> <li>Problem: Login fails</li> <li>Problem: Server is out of memory</li> </ul> </li> </ul>"},{"location":"SERVER_SETUP/#related","title":"Related","text":"<ul> <li>Creating an App for a Demo Server</li> <li>SORMAS Docker Repository</li> </ul>"},{"location":"SERVER_SETUP/#prerequisites","title":"Prerequisites","text":""},{"location":"SERVER_SETUP/#java-11","title":"Java 11","text":"<p>Download and install the Java 11 JDK (not JRE) for your operating system. We suggest using the Zulu OpenJDK.</p>"},{"location":"SERVER_SETUP/#linux","title":"Linux","text":"<pre><code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9\nsudo apt-add-repository 'deb https://repos.azul.com/zulu/deb/ stable main'\nsudo apt-get update\nsudo apt-get install zulu11\n</code></pre>"},{"location":"SERVER_SETUP/#windows","title":"Windows","text":"<p>For testing and development environments we suggest to download and run the installer of the Java 11 JDK for 32 or 64 bit client systems (depending on your system). You can check your Java version from the shell/command line using: <code>java -version</code>.</p>"},{"location":"SERVER_SETUP/#postgres-database","title":"Postgres Database","text":"<ul> <li>Install PostgreSQL (currently 9.5, 9.6 or 10) on your system (manuals for all OS can be found here: https://www.postgresql.org/download)</li> <li>Set max_connections = 288 and max_prepared_transactions = 256 (at least, sum of all connection pools) in <code>postgresql.conf</code> (e.g. <code>/etc/postgresql/10.0/main/postgresql.conf</code>; <code>C:/Program Files/PostgreSQL/10.0/data</code>) - make sure the property is uncommented and restart the service to apply the changes.</li> <li>Install the \"temporal tables\" extension for Postgres (https://github.com/arkhipov/temporal_tables)</li> <li>Windows: Download the latest version for your Postgres version:<ul> <li>https://github.com/arkhipov/temporal_tables/releases/latest, then copy the DLL from the project into the PostgreSQL's lib directory and the .sql and .control files into the directory share\\extension.</li> </ul> </li> <li>Linux (see https://github.com/arkhipov/temporal_tables#installation) <code>bash     sudo apt-get install libpq-dev     sudo apt-get install postgresql-server-dev-all     sudo apt install pgxnclient     #Check for GCC:     gcc --version # and install if missing     sudo pgxn install temporal_tables     # The packages can be removed afterward</code><ul> <li>Add the PostgreSQL path (/etc/PostgreSQL/10/bin) to Environment Variables</li> </ul> </li> </ul>"},{"location":"SERVER_SETUP/#sormas-server","title":"SORMAS Server","text":"<p>Get the latest SORMAS build by downloading the ZIP archive from the latest release on GitHub: https://github.com/hzi-braunschweig/SORMAS-Project/releases/latest</p>"},{"location":"SERVER_SETUP/#install-on-linux","title":"Install on Linux","text":"<p>Unzip the archive, copy/upload its contents to /root/deploy/sormas/$(date +%F) and make the setup script executable (as root user).</p> <pre><code>sudo su\nmkdir /root/deploy/sormas\ncd /root/deploy/sormas\nSORMAS_VERSION=1.y.z\nwget https://github.com/hzi-braunschweig/SORMAS-Project/releases/download/v${SORMAS_VERSION}/sormas_${SORMAS_VERSION}.zip\nunzip sormas_${SORMAS_VERSION}.zip\nmv deploy/ $(date +%F)\nrm sormas_${SORMAS_VERSION}.zip\nchmod +x $(date +%F)/server-setup.sh\n</code></pre>"},{"location":"SERVER_SETUP/#install-on-windows","title":"Install on Windows","text":"<ul> <li>Download &amp; install Git for Windows. This will provide a bash emulation that you can use to run the setup script: https://gitforwindows.org/</li> <li>Unzip the ZIP archive (e.g. into you download directory)</li> <li>Open Git Bash and navigate to the setup sub-directory</li> </ul>"},{"location":"SERVER_SETUP/#auditing","title":"Auditing","text":"<p>You can configure the audit logger of SORMAS by providing a Logback configuration file and setting the <code>audit.logger.config</code> property accordingly. An example is provided in <code>sormas-base/setup/audit-logback.xml</code>.  Not specifying a value for the property will effectively disable the audit log.</p>"},{"location":"SERVER_SETUP/#sormas-installation","title":"Sormas installation","text":"<ul> <li>Optional: Open <code>server-setup.sh</code> in a text editor to customize the install paths, database access and ports for the server. The default ports are 6080 (HTTP), 6081 (HTTPS) and 6048 (admin). Important: Do not change the name of the database user. The pre-defined name is used in the statements executed in the database.</li> <li>Set up the database and a Payara domain for SORMAS by executing the setup script: <code>sudo -s ./server-setup.sh</code> Press enter whenever asked for it</li> <li>IMPORTANT: Make sure the script executed successfully. If anything goes wrong you need to fix the problem (or ask for help), then delete the created domain directory and re-execute the script.</li> <li>IMPORTANT: Adjust the SORMAS configuration for your country in /opt/domains/sormas/sormas.properties</li> <li>Adjust the logging configuration in <code>/opt/domains/sormas/config/logback.xml</code> based on your needs (e.g. configure and activate email appender)</li> <li>Linux: Update the SORMAS domain</li> </ul>"},{"location":"SERVER_SETUP/#keycloak-server","title":"Keycloak Server","text":"<p>Note: SORMAS also comes with a basic auth mechanism using an JEE authentication realm. This authentication mechanism should only be used for development environments. For production environments always use the keycloak authentication mechansim. See Authentication &amp; Authorization.</p> <p>Keycloak can be set up in two ways: * as a Docker container (for just using Keycloak approach) * as a Standalone installation (for doing development in Keycloak like themes, SPIs)</p>"},{"location":"SERVER_SETUP/#keycloak-as-a-docker-container","title":"Keycloak as a Docker container","text":"<p>To be done only in the situation when SORMAS is already installed on the machine as a standalone installation.</p> <p>For complete Docker setup see the SORMAS-Docker repository.</p> <p>Prerequisites * SORMAS Server is installed * PostgreSQL is installed * Docker is installed * Open and edit <code>sormas-base/setup/keycloak/keycloak-setup.sh</code> with your system's actual values (on Windows use Git Bash).</p> <p>Setup * Run <code>sormas-base/setup/keycloak/keycloak-setup.sh</code> * Update <code>sormas.properties</code> file in the SORMAS domain with the property <code>authentication.provider=KEYCLOAK</code></p>"},{"location":"SERVER_SETUP/#keycloak-as-a-standalone-installation","title":"Keycloak as a standalone installation","text":"<p>Prerequisites * SORMAS Server is installed * PostgreSQL is installed</p> <p>Setup</p> <p>Setting Keycloak up as a standalone installation as described in the Getting started section of the official guide * Make sure to configure Keycloak with PostgreSQL Database * Set up an Admin User * Copy the <code>themes</code> folder content to <code>${KEYCLOAK_HOME}/themes</code> as described here * Deploy the <code>sormas-keycloak-service-provider</code> as described here * Update the <code>sormas-base/setup/keycloak/SORMAS.json</code> file by replacing the following placeholders: <code>${SORMAS_SERVER_URL}</code>, <code>${KEYCLOAK_SORMAS_UI_SECRET}</code>, <code>${KEYCLOAK_SORMAS_BACKEND_SECRET}</code>, <code>${KEYCLOAK_SORMAS_REST_SECRET}</code> * Create the SORMAS Realm by importing <code>sormas-base/setup/keycloak/SORMAS.json</code> see Create a New Realm * Update the <code>sormas-*</code> clients by generating new secrets for them * Update the realm's email settings to allow sending emails to users</p> <p>To update the SORMAS Server run the following commands:</p> <pre><code>${ASADMIN} set-config-property --propertyName=payara.security.openid.clientSecret --propertyValue=${KEYCLOAK_SORMAS_UI_SECRET} --source=domain\n${ASADMIN} set-config-property --propertyName=payara.security.openid.clientId --propertyValue=sormas-ui --source=domain\n${ASADMIN} set-config-property --propertyName=payara.security.openid.scope --propertyValue=openid --source=domain\n${ASADMIN} set-config-property --propertyName=payara.security.openid.providerURI --propertyValue=http://localhost:${KEYCLOAK_PORT}/keycloak/auth/realms/SORMAS --source=domain\n${ASADMIN} set-config-property --propertyName=sormas.rest.security.oidc.json \\\n        --propertyValue=\"{\\\"realm\\\":\\\"SORMAS\\\",\\\"auth-server-url\\\":\\\"http://localhost:${KEYCLOAK_PORT}/auth\\\",\\\"ssl-required\\\":\\\"external\\\",\\\"resource\\\":\\\"sormas-rest\\\",\\\"credentials\\\":{\\\"secret\\\":\\\"${KEYCLOAK_SORMAS_REST_SECRET}\\\"},\\\"confidential-port\\\":0,\\\"principal-attribute\\\":\\\"preferred_username\\\",\\\"enable-basic-auth\\\":true}\" \\\n        --source=domain\n${ASADMIN} set-config-property --propertyName=sormas.backend.security.oidc.json --propertyValue=\"{\\\"realm\\\":\\\"SORMAS\\\",\\\"auth-server-url\\\":\\\"http://localhost:${KEYCLOAK_PORT}/auth/\\\",\\\"ssl-required\\\":\\\"external\\\",\\\"resource\\\":\\\"sormas-backend\\\",\\\"credentials\\\":{\\\"secret\\\":\\\"${KEYCLOAK_SORMAS_BACKEND_SECRET}\\\"},\\\"confidential-port\\\":0}\" --source=domain\n</code></pre> <p>where: * <code>${ASADMIN}</code> - represents the location to <code>${PAYARA_HOME}\\bin\\asadmin</code> * <code>${KEYCLOAK_PORT}</code> - the port on which keycloak will run * <code>${KEYCLOAK_SORMAS_UI_SECRET}</code> - is the secret generated in Keycloak for the <code>sormas-ui</code> client * <code>${KEYCLOAK_SORMAS_REST_SECRET}</code> - is the secret generated in Keycloak for the <code>sormas-rest</code> client * <code>${KEYCLOAK_SORMAS_BACKEND_SECRET}</code> - is the secret generated in Keycloak for the <code>sormas-backend</code> client</p> <p>Then update <code>sormas.properties</code> file in the SORMAS domain with the property <code>authentication.provider=KEYCLOAK</code></p>"},{"location":"SERVER_SETUP/#connect-keycloak-to-an-already-running-instance-of-sormas","title":"Connect Keycloak to an already running instance of SORMAS","text":"<p>after setting up Keycloak as one of the described options above</p> <p>In case Keycloak is set up alongside an already running instance of SORMAS, these are the steps to follow to make sure already existing users can access the system: 1. Manually create an admin user in Keycloak for the SORMAS realm Creating a user (username has to be the same as admin's username in SORMAS) 2. Login to SORMAS and trigger the Sync Users button from the Users page 3. This will sync users to Keycloak keeping their original password - see SORMAS Keycloak Service Provider for more information about this</p>"},{"location":"SERVER_SETUP/#keycloak-configuration","title":"Keycloak configuration","text":"<p>More about the default configuration and how to customize can be found here Keycloak</p>"},{"location":"SERVER_SETUP/#web-server-setup","title":"Web Server Setup","text":""},{"location":"SERVER_SETUP/#apache-web-server","title":"Apache Web Server","text":"<p>Note: This is not necessary for development systems. When you are using SORMAS in a production environment you should use a http server like Apache 2 instead of putting the Payara server in the first line. Here are some things that you should do to configure the Apache server as a proxy:</p> <p>Activate all needed modules:</p> <pre><code>a2enmod ssl\na2enmod rewrite\na2enmod proxy\na2enmod proxy_http\na2enmod headers\n</code></pre> <p>Create a new site <code>/etc/apache2/sites-available/your.sormas.server.url.conf</code> (e.g. sormas.org.conf).</p> <p>Force SSL secured connections: redirect from http to https:</p> <pre><code>&lt;VirtualHost *:80&gt;\n        ServerName your.sormas.server.url\n        RewriteEngine On\n        RewriteCond %{HTTPS} !=on\n        RewriteRule ^/(.*) https://your.sormas.server.url/$1 [R,L]\n&lt;/VirtualHost&gt;\n&lt;IfModule mod_ssl.c&gt;\n&lt;VirtualHost *:443&gt;\n        ServerName your.sormas.server.url\n        ...\n&lt;/VirtualHost&gt;\n&lt;/IfModule&gt;\n</code></pre> <p>Configure logging:</p> <pre><code>ErrorLog /var/log/apache2/error.log\nLogLevel warn\nLogFormat \"%h %l %u %t \\\"%r\\\" %&gt;s %b _%D_ \\\"%{User}i\\\"  \\\"%{Connection}i\\\"  \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\"\" combined_ext\nCustomLog /var/log/apache2/access.log combined_ext\n</code></pre> <p>SSL key config:</p> <pre><code>SSLEngine on\nSSLCertificateFile    /etc/ssl/certs/your.sormas.server.url.crt\nSSLCertificateKeyFile /etc/ssl/private/your.sormas.server.url.key\nSSLCertificateChainFile /etc/ssl/certs/your.sormas.server.url.ca-bundle\n\n# disable weak ciphers and old TLS/SSL\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\nSSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE$\nSSLHonorCipherOrder off\n</code></pre> <p>Add a proxy pass to the local port:</p> <pre><code>ProxyRequests Off\nProxyPass /sormas-ui http://localhost:6080/sormas-ui\nProxyPassReverse /sormas-ui http://localhost:6080/sormas-ui\nProxyPass /sormas-rest http://localhost:6080/sormas-rest\nProxyPassReverse /sormas-rest http://localhost:6080/sormas-rest\n</code></pre> <p>Configure security settings:</p> <pre><code>Header always set X-Content-Type-Options \"nosniff\"\nHeader always set X-Xss-Protection \"1; mode=block\"\n# Disable Caching\nHeader always set Cache-Control \"no-cache, no-store, must-revalidate, private\"\nHeader always set Pragma \"no-cache\"\n\nHeader always set Content-Security-Policy \\\n        \"default-src 'none'; \\\n        object-src 'self'; \\\n        script-src 'self' 'unsafe-inline' 'unsafe-eval'; \\\n        connect-src https://fonts.googleapis.com https://fonts.gstatic.com 'self'; \\\n        img-src *; \\\n        style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; \\\n        font-src https://fonts.gstatic.com 'self'; \\\n        frame-src 'self'; \\\n        worker-src 'self'; \\\n        manifest-src 'self'; \\\n        frame-ancestors 'self'\n\n# The Content-Type header was either missing or empty.\n# Ensure each page is setting the specific and appropriate content-type value for the content being delivered.\nAddType application/vnd.ms-fontobject    .eot\nAddType application/x-font-opentype      .otf\nAddType image/svg+xml                    .svg\nAddType application/x-font-ttf           .ttf\nAddType application/font-woff            .woff\n</code></pre> <p>Activate output compression (very important!):</p> <pre><code>&lt;IfModule mod_deflate.c&gt;\n        AddOutputFilterByType DEFLATE text/plain text/html text/xml\n        AddOutputFilterByType DEFLATE text/css text/javascript\n        AddOutputFilterByType DEFLATE application/json\n        AddOutputFilterByType DEFLATE application/xml application/xhtml+xml\n        AddOutputFilterByType DEFLATE application/javascript application/x-javascript\n        DeflateCompressionLevel 1\n&lt;/IfModule&gt;\n</code></pre> <p>Provide the android apk:</p> <pre><code>Options -Indexes\nAliasMatch \"/downloads/sormas-(.*)\" \"/var/www/sormas/downloads/sormas-$1\"\n</code></pre> <p>For the Apache 2 security configuration we suggest the following settings (<code>/etc/apache2/conf-available/security.conf</code>):</p> <pre><code>ServerTokens Prod\nServerSignature Off\nTraceEnable Off\n\nHeader always set Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload\"\nHeader unset X-Frame-Options\nHeader always set X-Frame-Options SAMEORIGIN\nHeader unset Referrer-Policy\nHeader always set Referrer-Policy \"same-origin\"\nHeader edit Set-Cookie \"(?i)^((?:(?!;\\s?HttpOnly).)+)$\" \"$1;HttpOnly\"\nHeader edit Set-Cookie \"(?i)^((?:(?!;\\s?Secure).)+)$\" \"$1;Secure\"\n\nHeader unset X-Powered-By\nHeader unset Server\n</code></pre> <ul> <li>In case you need to update the site config while the server is running, use the following command to publish the changes without the need for a reload:</li> </ul> <pre><code>apache2ctl graceful\n</code></pre>"},{"location":"SERVER_SETUP/#firewall","title":"Firewall","text":"<ul> <li>The server should only publish the ports that are needed. For SORMAS this is port 80 (HTTP) and 443 (HTTPS). In addition you will need the SSH port to access the server for admin purposes.</li> <li>We suggest to use UFW (Uncomplicated Firewall) which provides a simple interface to iptables:</li> </ul> <pre><code>sudo apt-get install ufw\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow http\nsudo ufw allow https\nsudo ufw enable\n</code></pre>"},{"location":"SERVER_SETUP/#postfix-mail-server","title":"Postfix Mail Server","text":""},{"location":"SERVER_SETUP/#install-postfix-and-mailutils","title":"Install postfix and mailutils","text":"<pre><code>apt install aptitude\naptitude install postfix\n-&gt; choose \"satelite system\"\napt install mailutils\n</code></pre>"},{"location":"SERVER_SETUP/#configure-your-system","title":"Configure your system","text":"<pre><code>nano /etc/aliases\n-&gt; add \"root: enter-your@support-email-here.com\"\nnano /opt/domains/sormas/config/logback.xml\n-&gt; make sure \"EMAIL_ERROR\" appender is active and sends out to your email address\n</code></pre>"},{"location":"SERVER_SETUP/#testing-the-server-setup","title":"Testing the Server Setup","text":"<p>Use SSL Labs to test your server security config: https://www.ssllabs.com/ssltest</p>"},{"location":"SERVER_SETUP/#r-software-environment","title":"R Software Environment","text":"<p>In order to enable disease network diagrams in the contact dashboard, R and several extension packages are required. Then the Rscript executable has to be configured in the <code>sormas.properties</code> file. This can be conveniently accomplished by executing the R setup script from the SORMAS ZIP archive (see SORMAS Server):</p> <ul> <li>If the SORMAS installation has been customized, <code>r-setup.sh</code> the install paths may have to be adjusted accordingly with a text editor.</li> <li>Execute R setup script and follow its instructions.</li> </ul> <pre><code>chmod +x r-setup.sh\n./r-setup.sh\n</code></pre>"},{"location":"SERVER_SETUP/#sormas-to-sormas-certificate-setup","title":"SORMAS to SORMAS Certificate Setup","text":"<p>To be able to communicate with other SORMAS instances, there are some additional steps which need to be taken, in order to set up the certificate and the truststore. Please see the related guide for detailed instructions regarding SORMAS to SORMAS setup. </p>"},{"location":"SERVER_SETUP/#troubleshooting","title":"Troubleshooting","text":""},{"location":"SERVER_SETUP/#problem-login-fails","title":"Problem: Login fails","text":"<p>Check that the users table does have a corresponding entry. If not, the database initialization that is done when deploying sormas-ear.ear probably had an error.</p>"},{"location":"SERVER_SETUP/#problem-server-is-out-of-memory","title":"Problem: Server is out of memory","text":"<p>Old servers were set up with a memory size of less than 2048MB. You can change this using the following commands:</p> <pre><code>/opt/payara-172/glassfish/bin/asadmin --port 6048 delete-jvm-options -Xmx512m\n/opt/payara-172/glassfish/bin/asadmin --port 6048 delete-jvm-options -Xmx1024m\n/opt/payara-172/glassfish/bin/asadmin --port 6048 create-jvm-options -Xmx2048m\n</code></pre> <p>Alternative: You can edit the settings directly in the domain.xml in the config directory of the SORMAS domain. Just search for <code>Xmx</code> - there should be two entries that need to be changed.</p>"},{"location":"SERVER_UPDATE/","title":"Updating a SORMAS Server","text":"<p>SORMAS releases starting from 1.21.0 contain a script that automatically updates and deploys the server. If you are using an older version and therefore need to do a manual server update, please download the 1.21.0 release files and use the commands specified in the server-update.sh script.</p>"},{"location":"SERVER_UPDATE/#preparations","title":"Preparations","text":"<p>Note: At some versions it is mandatory to switch to a new Payara Server. If your version bump does apply to the listing below, please proceed with Payara migration. * Switching from &lt;=v1.66.4 to v1.67.0 or newer</p> <p>Note: You can skip this step if you've just set up your SORMAS server and have already downloaded the latest release.</p> <ul> <li>Get the latest release files (deploy.zip) from https://github.com/hzi-braunschweig/SORMAS-Project/releases/latest</li> <li>Unzip the archive and copy/upload its contents to /root/deploy/sormas/$(date +%F) <code>bash     cd /root/deploy/sormas     SORMAS_VERSION=1.y.z     wget https://github.com/hzi-braunschweig/SORMAS-Project/releases/download/v${SORMAS_VERSION}/sormas_${SORMAS_VERSION}.zip     unzip sormas_${SORMAS_VERSION}.zip     mv deploy/ $(date +%F)     rm sormas_${SORMAS_VERSION}.zip</code></li> </ul>"},{"location":"SERVER_UPDATE/#automatic-server-update","title":"Automatic Server Update","text":"<ul> <li>Navigate to the  folder containing the unzipped deploy files:   <code>cd /root/deploy/sormas/$(date +%F)</code></li> <li>Make the update script executable:   <code>chmod +x server-update.sh</code></li> <li>Optional: Open server-update.sh in a text editor to customize the values for e.g. the domain path or the database name. You only need to do this if you used custom values while setting up the server.</li> <li>Execute the update script and follow the instructions:   <code>./server-update.sh</code></li> <li>If anything goes wrong, open the latest update log file (by default located in the \"update-logs\" folder in the domain directory) and check it for errors.</li> </ul>"},{"location":"SERVER_UPDATE/#restoring-the-database","title":"Restoring the Database","text":"<p>If anything goes wrong during the automatic database update process when deploying the server, you can use the following command to restore the data:</p> <p><code>pg_restore --clean -U postgres -Fc -d sormas_db sormas_db_....dump</code></p>"},{"location":"SERVER_UPDATE/#default-logins","title":"Default Logins","text":"<p>These are the default users for most user roles, intended to be used on development or demo systems. In all cases except the admin user, the username and password are identical. Make sure to deactivate them or change the passwords on productive systems.</p>"},{"location":"SERVER_UPDATE/#admin","title":"Admin","text":"<p>Username: admin Password: sadmin</p>"},{"location":"SERVER_UPDATE/#web-users","title":"Web users","text":"<p>Surveillance Supervisor: SurvSup Case Supervisor: CaseSup Contact Supervisor: ContSup Point of Entry Supervisor: PoeSup Laboratory Officer: LabOff Event Officer: EveOff National User: NatUser National Clinician: NatClin</p>"},{"location":"SERVER_UPDATE/#mobile-app-users","title":"Mobile app users","text":"<p>Surveillance Officer: SurvOff Hospital Informant: HospInf Point of Entry Informant: PoeInf</p>"},{"location":"SERVER_UPDATE/#updating-keycloak","title":"Updating Keycloak","text":""},{"location":"SERVER_UPDATE/#standalone-installation","title":"Standalone installation","text":"<p>Follow the official Keycloak upgrade guide.</p> <p>To update follow this steps:</p> <ol> <li>Prerequisites</li> <li>Backup the DB</li> <li>Backup the current Keycloak configuration</li> <li>Download the 18.0.1 zip from https://www.keycloak.org/downloads</li> <li> <p>Extract everything from the archive somewhere on your disk (will call this <code>KEYCLOAK_HOME_NEW</code>)</p> </li> <li> <p>From you current installation (will call this <code>KEYCLOAK_HOME_OLD</code>) directory copy the following into the new installation</p> </li> <li>Copy directory <code>KEYCLOAK_HOME_OLD/themes/sormas</code> over to <code>KEYCLOAK_HOME_NEW/themes</code></li> <li> <p>Copy <code>KEYCLOAK_HOME_OLD/providers/sormas-keycloak-service-provider-*.jar</code> over to <code>KEYCLOAK_HOME_16/providers</code></p> </li> <li> <p>Setup Keycloak to use the Database</p> </li> <li>Start Keycloak</li> <li>Database will be migrated automatically</li> </ol>"},{"location":"SERVER_UPDATE/#docker-installation","title":"Docker installation","text":"<p>The docker installation is automatically upgraded to the latest version specified in the Dockerfile.</p> <p>Prerequisites: Make sure the DB is backed up, because once the upgrade is done the new DB won't be usable with the old version of Keycloak.</p> <p>For more info see the Keycloak Docker Documentation.</p>"},{"location":"SERVER_UPDATE/#how-to-migrate-to-new-payara-server","title":"How to migrate to new Payara Server","text":""},{"location":"SERVER_UPDATE/#step-1-shutdown-existing-domain","title":"Step 1: Shutdown existing domain","text":"<pre><code># Stop domain\nservice payara-sormas stop\n\n# Move existing domain\nDOMAIN_PATH=/opt/domains\nDOMAIN_NAME=\"sormas\"\nDOMAIN_BACKUP_NAME=\"sormas_backup\"\nmv $DOMAIN_PATH/$DOMAIN_NAME $DOMAIN_PATH/$DOMAIN_BACKUP_NAME\n</code></pre>"},{"location":"SERVER_UPDATE/#step-2-setup-payara-domain","title":"Step 2: Setup Payara domain","text":"<p>Please follow the server setup: Create the payara domain under the same path as before, use the same directory paths and the same database settings.</p>"},{"location":"SERVER_UPDATE/#step-3-apply-your-config-file-changes","title":"Step 3: Apply your config file changes","text":"<p>Transfer your settings from <code>sormas.properties</code>, <code>logback.xml</code> or changes in the domain setup. Use the new provided files and copy your changes in, don't reuse old files!</p>"},{"location":"SERVER_UPDATE/#step-4-install-new-sormas-version","title":"Step 4: Install new SORMAS version","text":"<p>To install the new SORMAS version in the Payara domain, proceed with the automatic update or for developers: Deploy SORMAS via the IDE as usual.</p>"},{"location":"SOP_DISEASES/","title":"SOP for Adding New Diseases to SORMAS","text":"<p>This file defines the SOP (Standard Operating Procedure) that should be followed when requesting new diseases to be added to the system by the core development team. Answering all the questions asked in this guide will make sure that we will be able to integrate new diseases into SORMAS as quickly as possible.</p>"},{"location":"SOP_DISEASES/#content","title":"Content","text":"<ul> <li>SOP for Adding New Diseases to SORMAS</li> <li>Content</li> <li>Guide<ul> <li>Step 1: Download the Data Dictionary</li> <li>Step 2: Define Basic Disease Details</li> <li>Step 3: Define Existing Case Fields</li> <li>Step 4: Define Existing Person Fields</li> <li>Step 5: Define the Relevant Symptoms</li> <li>Step 6: Define the Relevant Epidemiological Data</li> <li>Step 7: Define Health Conditions</li> <li>Step 8: Define New Fields in Other Areas</li> <li>Step 9: Provide Case Classification Criteria</li> <li>Step 10: Provide Additional Information</li> <li>Step 11: Send Your Disease Definition to the SORMAS Team</li> </ul> </li> </ul>"},{"location":"SOP_DISEASES/#guide","title":"Guide","text":""},{"location":"SOP_DISEASES/#step-1-download-the-data-dictionary","title":"Step 1: Download the Data Dictionary","text":"<p>Download the latest Data Dictionary from this repository and open it. Please never use a version of the Data Dictionary that you downloaded earlier as it is very likely that its contents have changed in the meantime.</p> <p>You will use the Data Dictionary to define all the details of the new disease. Please make sure to mark every addition or change (e.g. by colorizing the text or background of the row in a subtle red) so we don't miss any of the information you have provided.</p>"},{"location":"SOP_DISEASES/#step-2-define-basic-disease-details","title":"Step 2: Define Basic Disease Details","text":"<p>Open the Case tab of the Data Dictionary and scroll down to the tables that have a blue background. These tables define enumerations, which are basically data types with fixed values. Examples include the different case classifications, the gender of a person or the diseases that are used in SORMAS. Find the Disease enumeration table (refer to the Type column) and add a new row to it. Enter the following details:</p> <ul> <li>The name of the disease in the Caption column</li> <li>Optionally, if the disease has a long name, a short name or abbreviation in the Short column</li> </ul> <p>Use the Description column to answer the following question(s):</p> <ul> <li>Does the disease have contact follow-up?</li> <li>If yes, for how many days should contact follow-up be done?</li> </ul>"},{"location":"SOP_DISEASES/#step-3-define-existing-case-fields","title":"Step 3: Define Existing Case Fields","text":"<p>Look through the rows in the first table of the Case tab (which has a grey background). This table defines all the fields that are displayed in the Case Information tab in the SORMAS application. The Caption column defines the name of the field as it is displayed in the user interface, while the Diseases column specifies which diseases use this field. Please add the name (or, if available, short name) of your new disease to the \"New disease\" column of every row that represents a field that is relevant for it and colorize it.</p>"},{"location":"SOP_DISEASES/#step-4-define-existing-person-fields","title":"Step 4: Define Existing Person Fields","text":"<p>Open the Person tab and repeat step 3 for the first table containing the fields that define the details of a person in SORMAS.</p>"},{"location":"SOP_DISEASES/#step-5-define-the-relevant-symptoms","title":"Step 5: Define the Relevant Symptoms","text":"<p>Open the Symptoms tab which lists all the symptoms that are currently used in SORMAS. This is a very long list and you will have to go through every single row and define whether this symptom should be tracked for your new disease or not.</p> <p>It's possible that your new disease uses one or more symptoms that are currently not part of SORMAS. In that case, you need to add a new row for each of these symptoms to the bottom of the table and provide the name of the symptom in the Caption column.</p> <p>Most symptoms in SORMAS are simple Yes/No/Unknown fields where Yes means that the symptom is present, No that the symptom is not present and Unknown that there is no information about whether the symptom is present or not. If your symptom can simply be defined by this pattern, you don't have to specify anything else. However, if your symptom is more complex (e.g. there are a number of pre-defined values that the user should choose from), please provide all the necessary details about how the symptom should be specified by users in the Description column.</p>"},{"location":"SOP_DISEASES/#step-6-define-the-relevant-epidemiological-data","title":"Step 6: Define the Relevant Epidemiological Data","text":"<p>Open the Epidemiological data tab which lists all fields that are used to collect information about the epidemiological background of the case, e.g. whether they visited burials, had contact with a confirmed case or animals. Repeat step 3 for all rows in the first table, and add new rows if your new disease requires information that is not currently collected within SORMAS. As new fields in this tab are likely to be more complex than basic symptoms, make sure to define as much information about how they should function in the Description column.</p>"},{"location":"SOP_DISEASES/#step-7-define-health-conditions","title":"Step 7: Define Health Conditions","text":"<p>Open the Health conditions tab which contains a list of pre-existing conditions that are not symptoms of the disease, but are still relevant especially for case management purposes in a hospital. Repeat step 3 for all rows in the first table, and add new rows if there are health conditions relevant for your new disease that are not part of SORMAS yet. As always with new fields, make sure to provide all relevant details in the Description column.</p>"},{"location":"SOP_DISEASES/#step-8-define-new-fields-in-other-areas","title":"Step 8: Define New Fields in Other Areas","text":"<p>It is possible that your disease requires further information to be collected that is not supported by SORMAS yet, e.g. new details about the person, specific information about its hospitalization, or even very important fields that should directly go into the case information. You can use the same process you used to define new symptoms, health conditions or epidemiological data fields by opening the tab in question and adding new rows to the topmost table.</p> <p>At this point, you have finished all the necessary definitions in the Data Dictionary. Save your work and prepare an email with the Data Dictionary file attached to it. Don't send this email before working through the remaining steps though, as there are still a few details that are needed in order to finish the specification of your new disease.</p>"},{"location":"SOP_DISEASES/#step-9-provide-case-classification-criteria","title":"Step 9: Provide Case Classification Criteria","text":"<p>Optimally, when defining a new disease, you should also specify the criteria SORMAS should use to automatically classify the case as suspect, probable or confirmed. In order to do this in a way that is compatible with the system we use, you will need access to a running SORMAS system (e.g. the play server you can find at https://sormas.org). Log in as any user (e.g. the default user on the play server), open the About section from the main menu, and open the Case Classification Rules (HTML) document. Please define the classification criteria in a way that is similar to the system used in this document. If available, you can also send us an official document by WHO or your national CDC that specifies the classification criteria.</p>"},{"location":"SOP_DISEASES/#step-10-provide-additional-information","title":"Step 10: Provide Additional Information","text":"<p>If there are still things that are necessary in order to properly implement the new disease in SORMAS (you might require us to create a whole new area for cases or there might be very complex mechanics that need a lot more specification), please give us as many details about them as possible. Just put all this information into your email.</p>"},{"location":"SOP_DISEASES/#step-11-send-your-disease-definition-to-the-sormas-team","title":"Step 11: Send Your Disease Definition to the SORMAS Team","text":"<p>Send your email containing the updated Data Dictionary file, the case classification criteria and your additional notes to sormas@helmholtz-hzi.de. Congratulations, your work is done! We should now have all the information we need in order to integrate your disease into SORMAS. If there is anything that is unclear or if we need additional details, we will get in touch with you as soon as possible. Thank you so much for contributing to SORMAS and helping us to fight the spread of as many diseases as possible!</p>"},{"location":"TROUBLESHOOTING/","title":"Troubleshooting","text":"<p>Please consult this collection of solutions to common problems if you have any issues before issuing a support request or asking developers for help. Also note that this resource has only been added recently and will be extended in the future. If you have encountered (and fixed) any issue that you think would be worth adding to this list, please don't hesitate to let us know!</p>"},{"location":"TROUBLESHOOTING/#android-application-faq","title":"Android Application FAQ","text":"<p>Q: I don't see a logout option anywhere in the mobile app. How can I change my user? A: The logout option is hidden by default because users in the field often don't know their own passwords, but their devices are instead set up by a supervisor. If you want to change your user, go to the Settings screen and tap the version number five times to bring up additional options, including the logout option.</p> <p>Q: The app crashes. How can I get a log file? A: If you are using a release version of the app and need to get error logs, you can do the following:  </p> <ol> <li>Enable developer options in the Android device's settings</li> <li>Use the \"Take Bug Report\" option. The full report is not needed.</li> <li>The zip file that is created will have a dumpstate-.txt file that contains the log and some more information <li>Open it and search for de.symeda.sormas to identify the process id. E.g. <code>de.symeda.sormas.app/de.symeda.sormas.app.login.LoginActivity$_11109#0</code> -&gt; 11109 is the id</li> <li>Search for all occurences of the process id to filter the file down to lines that contain the actual log of sormas</li>"},{"location":"TROUBLESHOOTING/#debugging-performance-problems","title":"Debugging Performance Problems","text":"<p>Performance logging can be used to find out which part of the code or system might be responsible for long-running functions in the application. This helps the developers to identify the source of the problems quicker and find out whether there are several problems at once or performance problems that manifest in Java execution time instead of slow SQL queries.</p> <p>Caution: Do not expose any private data! Whenever you debug problems on an instance with productive data, please make sure that the logged information does not contain any personal data like real person names, birth dates, etc. to the public. Never provide such data anywhere on GitHub or any other online tool!</p>"},{"location":"TROUBLESHOOTING/#switch-on-performance-logging-in-sormas","title":"Switch on Performance Logging in SORMAS","text":"<ol> <li> <p>Open the logback file located in your domain (default path: <code>/opt/domains/sormas/config/logback.xml</code>) and change the log level of <code>PerformanceLoggingInterceptor</code> to <code>DEBUG</code> or <code>TRACE</code>. The config change will be recognized during runtime within 30s. After that you will see detailed log entries in the SORMAS log.</p> </li> <li> <p>Set the log level back to its default once the logging has been done since it can reduce the overall performance of SORMAS.</p> </li> </ol>"},{"location":"TROUBLESHOOTING/#analyze-performance-logs","title":"Analyze Performance Logs","text":"<p>Performance logs can be analyzed in detail using the <code>PerformanceLogAnalysisGenerator</code>. To use this tool, set the <code>PerformanceLoggingInterceptor</code>'s log level to <code>TRACE</code> as described above and reproduce the scenario you want to investigate on the server instance.</p> <p>After this, process the debug log file (default path: <code>/opt/domains/sormas/logs/application.debug</code>) using the <code>PerformanceLogAnalysisGenerator</code>. The log file's path is specified as the program argument when calling <code>PerformanceLogAnalysisGenerator</code>'s <code>main</code> method. Processing the log file will generate three files (<code>&lt;logfileName&gt;.csv</code>, <code>&lt;logfileName&gt;.txt</code>, <code>&lt;logfileName&gt;.html</code>) to further investigate method runtimes.</p> <p><code>&lt;logfileName&gt;.html</code> provides a navigable overview of methods along with runtime statistics (total, min, max and average time) and calls to sub methods.</p> <p>Sometimes it is convenient to analyze a number of different scenarios in a row. To do so, produce snippets of the <code>application.debug</code> log using <code>tail</code> for each of the scenarios to be investigated:</p> <ol> <li> <p>start <code>tail -f &lt;logfileName&gt; &gt; &lt;snippetDirectory&gt;/&lt;snippet.debug&gt;</code></p> </li> <li> <p>replay the steps to be analyzed</p> </li> <li> <p>stop <code>tail -f</code></p> </li> </ol> <p>The <code>PerformanceLogAnalysisGenerator</code> can now batch process all of the snippets by pointing to the directory instead of a log file. Calling <code>PerformanceLogAnalysisGenerator.main</code> with argument <code>&lt;snippetDirectory&gt;</code> generates the analysis files (<code>.csv</code>, <code>.txt</code>, <code>.html</code>) for each file <code>*.debug</code> in this directory. The generated files will be placed in <code>&lt;snippetDirectory&gt;</code>, too.</p>"},{"location":"TROUBLESHOOTING/#log-slow-sql-queries-in-postgresql","title":"Log Slow SQL Queries in PostgreSQL","text":"<p>You can enable the logging of slow SQL queries in your PostgreSQL server in <code>postgresql.conf</code>:</p> <ol> <li> <p>Change the value of <code>log_min_duration_statement</code> to a value that fits your need (e.g. 10000).</p> </li> <li> <p>Restart the PostgreSQL service or reload the config.</p> </li> </ol>"},{"location":"TROUBLESHOOTING/#run-analysis-of-a-sql-query-sormas-docker","title":"Run analysis of a SQL Query (SORMAS-Docker)","text":"<p>You can provide an analysis of a slow running query to help the developers to see where the query is getting slow and how to fix it.</p> <ol> <li> <p>SORMAS-Docker already logs slow SQL queries by default. You can view the log output on its host VM with <code>docker logs sormas-docker_postgres_1</code>.</p> </li> <li> <p>Copy the SQL statement, replace all parameters (<code>$x</code>) with the values (see the following log statement) and place the SQL query on the system (outside Docker container on host):</p> </li> </ol> <pre><code>sudo bash\ncd /var/lib/docker/psqldata\nvi explain.sql\n\n# hit i (INSERT)\n# Paste this into the file:  EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS, FORMAT JSON) \n# Paste the complete SQL statement\n# Hit ESC and :wq to save the file\n</code></pre> <ol> <li>Execute the SQL (inside Docker container):</li> </ol> <pre><code>sudo bash\ndocker exec -ti sormas-docker_postgres_1 bash\ncd /var/lib/postgresql/data\nsu postgres\npsql -XqAt -d sormas -f explain.sql &gt; analyze.json\n</code></pre> <ol> <li> <p>Copy the output to your home dir on the VM (not inside the Docker container) to be able to copy it from the VM to your local system: <code>mv analyze.json /home/user.name/</code></p> </li> <li> <p>Create a visual report at https://explain.dalibo.com/ in order to share the analysis.</p> </li> </ol>"},{"location":"TROUBLESHOOTING/#ide-troubleshooting-android-studio","title":"IDE Troubleshooting: Android Studio","text":"<p>If for some reason the Android App is not building correctly (for example due to unexpected <code>ClassNotFoundExceptions</code>), here is what you should try: - Clean the Project (Build -&gt; Clean Project) - Invalidate Caches (File -&gt; Invalidate Caches / Restart...) - Wipe your Android VM (AVD Manager -&gt; Wipe Data)</p> <p>If you get this exception: <code>Unable to load class 'javax.xml.bind.JAXBException'</code>, the reason is most likely a faulty JDK version. For the androidapp, you need Java JDK 8. To change the JDK, go to File -&gt; Project Structure -&gt; JDK Location and select a valid JDK (on Linux, check the folder <code>/usr/lib/jvm</code> and/or install if necessary: <code>sudo apt install openjdk-8-jdk</code>)</p>"},{"location":"TROUBLESHOOTING/#ide-troubleshooting-eclipse","title":"IDE Troubleshooting: eclipse","text":""},{"location":"TROUBLESHOOTING/#deployment-problems","title":"Deployment Problems","text":"<p>Unfortunately, when using eclipse together with the Payara Tools, there are a number of deployment problems that you might run into. Examples of these include:</p> <ul> <li>ClassDefNotFoundExceptions after deploying the artifacts and logging in to the web app</li> <li>Error messages in eclipse telling you that the deployment failed</li> </ul> <p>There are a couple of things you can do to fix these problems:</p> <ul> <li>Do a Maven update for all projects</li> <li>Stop and restart the server</li> <li>Re-deploy the server artifacts</li> </ul> <p>If the problem occurred right after you've pulled new code from GitHub, your safest bet is probably to start with the Maven update. For most other problems, a simple re-deployment or, if necessary, server restart should suffice.</p>"},{"location":"TROUBLESHOOTING/#news-feeds-polling","title":"News Feeds Polling","text":"<p>When running eclipse with JDK 11, you might encounter the following error message: <code>An internal error occurred during: \"Polling news feeds\".  javax/xml/bind/JAXBContext</code>. To fix it, disable <code>Window --&gt; Preferences --&gt; General --&gt; News --&gt; \"Enable automatic news polling\"</code>.</p>"},{"location":"TROUBLESHOOTING/#redeployment-problems","title":"Redeployment problems","text":"<p>If you face problems that <code>sormas-ui</code> or <code>sormas-rest</code> cannot call the backend anymore after redeploying, please follow this instruction.</p>"},{"location":"TROUBLESHOOTING/#malware-detection-triggers","title":"Malware detection triggers","text":"<p>It might happen that a defensive program on your system falsely recognizes files needed to run SORMAS as vulnerability.</p> <p>Please ignore the following known findings (no quarantine, no deletion): * File: payara-5.2021.10.zip, Recognized: Trojan:Script/Oneeva.A!ml (found by Windows Defender). Has rarely happened when running server-setup.sh which downloads that file. The script subsequently fails because zip file cannot be extracted. * File: glassfish/modules/war-util.jar, Recognized: Exploit:Java/CVE-2012-0507.D!ldr (found by Windows Defender in payara-5.2021.10). The deployed OSGi bundle might also be recognized, for example under this path: osgi-cache/felix/bundle365/version0.0/bundle.jar . If the file is quarantined, the paraya domain fails to start, without any exception in the log.</p>"},{"location":"sormas-base/doc/keycloak/","title":"Keycloak","text":"<p>Open Source Identity and Access Management. In SORMAS Keycloak is available as an alternative authentication provider to the default authentication method.</p> <p>Current version is: Keycloak 16.1.0</p>"},{"location":"sormas-base/doc/keycloak/#setup","title":"Setup","text":"<p>To set up Keycloak check the guide here Keycloak Setup</p>"},{"location":"sormas-base/doc/keycloak/#sormas-realm","title":"SORMAS Realm","text":"<p>The SORMAS Realm in Keycloak contains all the configuration which are specific to the SORMAS Project. All the configuration is part of the <code>setup/keycloak/SORMAS.json</code> file.</p>"},{"location":"sormas-base/doc/keycloak/#configuration-summary","title":"Configuration summary","text":""},{"location":"sormas-base/doc/keycloak/#login-authentication","title":"Login &amp; Authentication","text":"<ul> <li>Duplicate emails are allowed in order to support the same requirement as SORMAS which in some installations require admin support for some users, in which case the admin will use her own email address</li> <li>No login with emails due to the previous point</li> <li>Password Policy comes predefined since version 1.54 of the SORMAS-Project with the following default settings</li> <li>Length of minimum 12 characters</li> <li>At least 1 upper case letter</li> <li>At least 1 lower case letter</li> <li>At least 1 digit</li> <li>At least 1 special character</li> <li>OTP is supported by default through the Google Authenticator or Free OTP by has to be activated from the   Keycloak Admin console</li> <li>Forgot Password is enabled by default</li> <li>sormas-sha256 is an encryption algorithm which comes packaged with Keycloak to support transition of existing   environments towards the Keycloak Authentication Provider</li> </ul>"},{"location":"sormas-base/doc/keycloak/#clients","title":"Clients","text":"<p>The SORMAS Realm relies on the following clients:</p> <ul> <li>sormas-ui - handles access to the SORMAS wen UI</li> <li>sormas-app - handles access to the SORMAS Android App</li> <li>sormas-rest - handles access to the SORMAS API</li> <li>sormas-backend - handles SORMAS server requests</li> <li>sormas-stats - handles access to the external SORMAS-Stats App</li> </ul>"},{"location":"sormas-base/doc/keycloak/#how-to-debug","title":"How to debug","text":"<p>How to obtain an access token to impersonate a certain client:</p> <pre><code>curl --location --request POST 'http://localhost:8081/keycloak/realms/SORMAS/protocol/openid-connect/token' \n--header 'Content-Type: application/x-www-form-urlencoded' --data-urlencode 'client_id=sormas-stats' \n--data-urlencode 'client_secret=changeit' --data-urlencode 'grant_type=password' -d \"username=admin\" \n-d \"password=1234abdcefHAH\\!asd\"\n{\"access_token\":\"SOME_TOKEN\",...}\n</code></pre> <p>Use this token to access a certain endpoint:</p> <pre><code>curl -X POST http://localhost:8081/keycloak/realms/SORMAS/protocol/openid-connect/userinfo \n-H 'Authorization: Bearer SOME_TOKEN'\n{\"sub\":\"399cac62-1b05-45aa-b02c-7ea0a240f144\",\"resource_access\":{\"sormas-stats\":{\"roles\":[\"sormas-stats-access\"]},\n\"account\":{\"roles\":[\"manage-account\",\"manage-account-links\",\"view-profile\"]}},\"email_verified\":false,\"name\":\"ad min\",\n\"preferred_username\":\"admin\",\"given_name\":\"ad\",\"family_name\":\"min\"}\n</code></pre>"},{"location":"sormas-base/doc/keycloak/#sormas-backend-client-in-keycloak","title":"sormas-backend client in Keycloak","text":"<p>This client is used to allow the SORMAS backend to access the Keycloak server. It is configured as a confidential client, which means that it has a secret that is used to authenticate the client to the OIDC server. This is based on the client credentials grant type, which is configured via the associated Service Account. Currently, the following roles are assigned to the service account:</p> <pre><code>{\n  \"clientRoles\": {\n    \"realm-management\": [\n      \"manage-realm\",\n      \"manage-users\",\n      \"manage-clients\"\n    ]\n  }\n}\n</code></pre>"},{"location":"sormas-base/doc/keycloak/#sormas-stats-client-in-keycloak","title":"sormas-stats client in Keycloak","text":"<p>This client defines a <code>sormas-stats-access</code> client role. Once assigned to a user, it can access <code>sormas-stats</code>. The client scope <code>client roles</code> mapper adds the roles to the <code>userinfo</code> endpoint, which is queried by the Apache2 OIDC module to determine the user's roles.</p>"},{"location":"sormas-base/doc/keycloak/#roles","title":"Roles","text":"<p>The role management is handled solely by SORMAS starting with 1.70.</p>"},{"location":"sormas-base/doc/keycloak/#email","title":"Email","text":"<p>Email configurations are optional and are not part of the default configuration.</p> <p>In case the system relies on users activating their own accounts it's required to configure these settings.</p>"},{"location":"sormas-base/doc/keycloak/#audit-logging","title":"Audit Logging","text":"<p>Audit logging of all login activity can be done by setting <code>org.keycloak.events</code> to <code>DEBUG</code>. To enable this, please copy the files from <code>sormas-base/setup/keycloak/audit-logging/</code> to <code>/opt/jboss/startup-scripts/</code> inside your Keycloak server and restart the server.</p>"},{"location":"sormas-base/doc/keycloak/#custom-configuration","title":"Custom Configuration","text":"<p>The configuration provided by default is the minimum required configuration for Keycloak to work together with SORMAS.</p> <p>The Keycloak configuration can be adjusted by any user with admin rights, however beware that any change to the default configuration might render the system unusable.</p> <p>The following configurations are most likely to be environment specific:</p> <ul> <li>Email Settings</li> <li>make sure to set an email for the admin user, so the Test connection feature works</li> <li>Password Policies</li> <li>The Password Blacklist policy can only be configured with access to the host machine</li> <li>OTP Policies</li> <li>Can be activated by default for all user by marking Basic Auth Password+OTP as required in the     Authentication&gt;Flows section, then mark it as default in the Authentication&gt;Required section</li> </ul>"},{"location":"sormas-cargoserver/","title":"SORMAS development server setup using maven-cargo","text":"<p>This module installs a local Payara server, deploys the previously built SORMAS artifacts and starts the server.</p> <p>The server installation is located in the project build directory (<code>target/cargo</code>), as well as the SORMAS server directories (<code>target/sormasfolders</code>).</p>"},{"location":"sormas-cargoserver/#prerequisites","title":"Prerequisites","text":"<p>This setup requires a working Java, maven, and docker(-compose) environment.</p>"},{"location":"sormas-cargoserver/#configuration","title":"Configuration","text":"<p>The configuration of the docker setup and the payara domain setup are defined by the generated file <code>.env</code>. It configures port and server of the sormas-postgres docker container or another postgres database, as well as other ports defined in the <code>domain.xml</code>.</p> <p>Properties used in the payara deployment are configured in the generated file <code>target/sormas.properties</code>.</p> <p>Both <code>.env</code> and <code>sormas.properties</code> can be customized by adding a file <code>custom.env</code> respectively <code>custom.properties</code> in the project base directory, where additional properties for the respective purpose are defined. Already defined properties are overwritten. Both <code>custom.env</code> and <code>custom.properties</code> are excluded in <code>.gitignore</code>, so local customizations are protected from accidental commits.</p> <p>To run the cargo server against an existing database, configure</p> <pre><code>SORMAS_POSTGRES_SERVER=&lt;database-server&gt;\nSORMAS_POSTGRES_PORT=&lt;database-port&gt;\n</code></pre> <p>in file <code>custom.env</code> and skip the <code>docker-compose</code> step in the server setup (see file <code>custom.env.example</code>).</p> <p>To add properties to the generated <code>sormas.properties</code>, configure e.g.</p> <pre><code>custombranding=true\ncustombranding.name=&lt;name&gt;\ncustombranding.logo.path=&lt;logopath&gt;\n</code></pre> <p>in file <code>custom.properties</code> (see file <code>custom.properties.example</code>).</p> <p>After adjusting the configurations, (re)run <code>mvn install</code> and (re)start the server.</p>"},{"location":"sormas-cargoserver/#build-the-project-simple","title":"Build the project (simple)","text":"<p>The most convenient way to build and deploy the SORMAS artifacts to cargo is to use <code>build_deploy.sh</code>.</p>"},{"location":"sormas-cargoserver/#build-the-project-details","title":"Build the project (details)","text":"<p>Build all SORMAS artifacts:</p> <pre><code>cd sormas-base &amp;&amp; mvn install\n</code></pre>"},{"location":"sormas-cargoserver/#start-sormas-postgresql-docker-container","title":"Start SORMAS-PostgreSQL docker container","text":"<pre><code>cd sormas-cargoserver &amp;&amp; docker-compose up -d\n</code></pre>"},{"location":"sormas-cargoserver/#start-local-sormas-server","title":"Start local SORMAS server","text":"<pre><code>cd sormas-cargoserver &amp;&amp; mvn cargo:run\n</code></pre>"},{"location":"sormas-cargoserver/#visit","title":"Visit","text":"<p>Once the deployment is completed, you can navigate to <code>http://localhost:6080/sormas-ui</code> and login as <code>admin</code> with password <code>sadmin</code>.</p>"},{"location":"sormas-cargoserver/#stop-local-sormas-server","title":"Stop local SORMAS server","text":"<pre><code>cd sormas-cargoserver &amp;&amp; mvn cargo:stop\n</code></pre>"},{"location":"sormas-cargoserver/#stop-db-sormas-postgresql-docker-container","title":"Stop DB SORMAS-PostgreSQL docker container","text":"<pre><code>cd sormas-cargoserver &amp;&amp; docker-compose down\n</code></pre>"},{"location":"sormas-cargoserver/#remove-docker-volume-if-intended","title":"Remove docker volume (if intended)","text":"<p>The SORMAS-PostgreSQL docker container uses a named docker volume:</p> <pre><code>$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               sormas-cargoserver_psqldata_cargoserver\n</code></pre> <p>To remove this docker volume:</p> <pre><code>sudo docker volume rm sormas-cargoserver_psqldata_cargoserver\n</code></pre>"},{"location":"sormas-keycloak-service-provider/","title":"Custom SORMAS Keycloak Service Provider","text":"<p>This is a keycloak service provider that implements SORMAS legacy password hashing mechanism for two use cases:</p> <ol> <li>Migration of existing user when moving from the basic authentication mechanism to keycloak</li> <li>Creation of users without email in SORMAS. In this case the password will be shown to the admin once. </li> </ol> <p>More on Authentication &amp; Authorization.</p>"},{"location":"sormas-keycloak-service-provider/#sormas-password-hash-provider","title":"SORMAS Password Hash Provider","text":"<p>This Service Provider is implementing in Keycloak a Hash Mechanism for passwords similar to the one used in SORMAS to allow migrating of credentials for already existing users.</p> <p>Since SORMAS and Keycloak are using different hashing techniques, the <code>SormasPasswordHashProvider</code> replicates the SORMAS technique by importing the <code>sormas-api</code> dependency where the technique is defined.</p>"},{"location":"sormas-keycloak-service-provider/#sormas-hashing-technique","title":"SORMAS Hashing Technique","text":"<p>For more info about the SORMAS hashing technique see <code>sormas-api/src/main/java/de/symeda/sormas/api/utils/PasswordHelper.java</code></p> <p>In Keycloak this algorithm will be identifiable by the id <code>sormas-sha256</code>.</p>"},{"location":"sormas-keycloak-service-provider/#keycloak-hashing-technique","title":"Keycloak Hashing Technique","text":"<p>Keycloak supports a more configurable approach to password policy which can be customized for each system. See Password Policies.</p>"},{"location":"sormas-keycloak-service-provider/#sormas-user-password-sync","title":"SORMAS User Password Sync","text":"<p>There are only 2 ways of synchronizing the user's password from SORMAS into Keycloak: * whenever a user is created for the first time in Keycloak - being triggered from SORMAS * whenever a user's password is updated in SORMAS, and the user doesn't have an email address setup</p> <p>For any of the events about the user's credentials in Keycloak are overwritten by those from SORMAS, and the hashing algorithm will be changed to <code>sormas-sha256</code>.</p> <p>However once a user chooses to change their password in Keycloak (trough the Forgot Password mechanism or by the admin), their credentials will be updated using the default or configured Password Policies from Keycloak.</p>"},{"location":"sormas-keycloak-service-provider/#deployment-of-the-spi","title":"Deployment of the SPI","text":"<p>To deploy the Custom SPI, make sure to build this project and then follow the steps described in Register an SPI Using the Keycloak Deployer</p>"},{"location":"sormas-rest/","title":"REST interface for SORMAS","text":"<p>This is a one-stop-shop for all systems that need access to the SORMAS data:</p> <ul> <li>Synchronization of data with the SORMAS Android app</li> <li>Data access for the SORMAS Angular web app</li> <li>Exchanging data with other SORMAS instances</li> <li>External services like symptom diaries or citizen applications</li> <li>Synchronization of data with other surveillance or to data analysis systems</li> </ul>"},{"location":"sormas-rest/#authentication","title":"Authentication","text":"<p>Access to the API is by default restricted by HTTP Basic authentication. Using OIDC/OAUTH2/Bearer authentication is also possible depending on how keycloak is setup. See , it can als use Bearer authentication. See Authentication &amp; Authorization. </p> <p>For basic auth use the username and password as credentials for your HTTP requests. The user needs to have a user role having the SORMAS_REST user right.</p>"},{"location":"sormas-rest/#api-documentation","title":"API Documentation","text":"<p>The SORMAS REST API is documented automatically. The OpenAPI specification files are generated during the build process and can be found at <code>${Project Root}/sormas-rest/target/swagger.{json,yaml}</code>.</p> <p>You can render the OpenAPI specification with tools like editor.swagger.io. This allows you to inspect endpoints and example payloads, generate a matching API client for many languages, and to easily interact with the API of a live instance.</p>"},{"location":"sormas-rest/#openapi-swagger","title":"OpenAPI / Swagger","text":"<p>The OpenAPI files are generated with the <code>swagger-maven-plugin</code> and the Swagger Annotation Framework[1].</p> <p>If you are only interested in the OpenAPI specification files, you may either download a recent SORMAS release where the files reside in the <code>openapi</code> directory, or execute the following command inside the <code>sormas-base</code> module's directory to build them for yourself:</p> <pre><code># Requires Maven to be installed!\nmvn package --projects ../sormas-rest --also-make -Dmaven.test.skip=true\n</code></pre> <p>The specification files are created at the path specified above.</p> <p>[1] Swagger Annotations Guide on Github: https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations</p>"}]}